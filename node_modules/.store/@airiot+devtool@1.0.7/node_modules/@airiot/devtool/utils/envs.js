const chalk = require("chalk");
const paths = require('../config/paths');

let developConfig = {};
try {
  developConfig = require(paths.developConfig)
} catch (err) {
  if(err.code != 'MODULE_NOT_FOUND') {
    throw err;
  }
}

const getHost = () => {
  if(developConfig.host){
    return developConfig.host
  }

  const envs = process.env
  const args = process.argv
  
  let host
  const hostArgs = args.filter(arg => arg.startsWith("--host="))
  if(hostArgs.length != 0) {
    host = hostArgs[0].replace('--host=', '')
  } else if(envs.IOT_URL) {
    host = envs.IOT_URL
  } else {
    console.error('[iot:envs] 请设置环境变量 IOT_URL')
    process.exit()
  }

  if(host.endsWith('/')) {
    host = host.substring(0, host.length - 1)
  }
  
  return host
}

const getBaseUrl = () => {
  const envs = process.env
  const args = process.argv

  let baseUrl = null

  if(developConfig.base){
    baseUrl = developConfig.base
  } else if(developConfig.branch){
    baseUrl = developConfig.branch
  } else {
    const hostArgs = args.filter(arg => arg.startsWith("--base="))
    if(hostArgs.length != 0) {
      baseUrl = hostArgs[0].replace('--base=', '')
    } else if(envs.IOT_BASEURL) {
      baseUrl = envs.IOT_BASEURL
    }
  }

  if(!baseUrl) {
    baseUrl = getHost()
  } else if(!(baseUrl.startsWith('http://') || baseUrl.startsWith('https://') || baseUrl.startsWith('//'))) {
    baseUrl = new URL(baseUrl, getHost()).href
  }

  return baseUrl
}

const getModule = (env) => {
  const envs = process.env
  const args = process.argv

  let modules = env == 'production' ? 'all' : 'admin'

  const hostArgs = args.filter(arg => arg.startsWith("--module="))
  if(hostArgs.length != 0) {
    modules = hostArgs[0].replace('--module=', '')
  } else if(envs.IOT_MODULE) {
    useLocal = envs.IOT_MODULE
  }

  return modules
}

module.exports = {
  getHost, getBaseUrl, getModule, developConfig
}
