"use strict";

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = "production";
process.env.NODE_ENV = "production";

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on("unhandledRejection", (err) => {
  throw err;
});

// Ensure environment variables are read.
require("../config/env");

const chalk = require("chalk");
const path = require("path");
const webpack = require("webpack");
const checkRequiredFiles = require("react-dev-utils/checkRequiredFiles");
const formatWebpackMessages = require("react-dev-utils/formatWebpackMessages");
const printHostingInstructions = require("react-dev-utils/printHostingInstructions");
const FileSizeReporter = require("react-dev-utils/FileSizeReporter");
const printBuildError = require("react-dev-utils/printBuildError");
const configFactory = require("../config/webpack.config");
const paths = require("../config/paths");
const { getHost } = require("../utils/envs");
const { config, stdout } = require("process");
const child_process = require('child_process');
const { resolve } = require("path");
const { error } = require("console");

const measureFileSizesBeforeBuild =
  FileSizeReporter.measureFileSizesBeforeBuild;
const printFileSizesAfterBuild = FileSizeReporter.printFileSizesAfterBuild;

const isInteractive = process.stdout.isTTY;
const host = getHost();

console.log(chalk.green('[iot:envs] 请求 IOT_URL 为: ' + host))

const isCI = process.env.CI &&
(typeof process.env.CI !== "string" ||
  process.env.CI.toLowerCase() !== "false")


const build = new Promise((resolve, reject) => {
  configFactory("production", host).then(config => {
    let compiler = webpack(config);
    compiler.run((err, stats) => {
      let messages;
      if (err) {
        if (!err.message) {
          return reject(err);
        }
        messages = formatWebpackMessages({
          errors: [err.message],
          warnings: [],
        });
      } else {
        let json = stats.toJson({ all: false, warnings: true, errors: true })
        messages = formatWebpackMessages({
          errors: json.errors.map(err => err.message),
          warnings: json.warnings.map(w => w.message)
        })
      }
      if (messages.errors.length) {
        // Only keep the first error. Others are often indicative
        // of the same problem, but confuse the reader with noise.
        if (messages.errors.length > 1) {
          messages.errors.length = 1;
        }
        return reject(new Error(messages.errors.join("\n\n")));
      }
      if (
        process.env.CI &&
        (typeof process.env.CI !== "string" ||
          process.env.CI.toLowerCase() !== "false") &&
        messages.warnings.length
      ) {
        console.log(
          chalk.yellow(
            "\nTreating warnings as errors because process.env.CI = true.\n" +
              "Most CI servers set it automatically.\n"
          )
        );
        return reject(new Error(messages.warnings.join("\n\n")));
      }

      const resolveArgs = {
        stats,
        warnings: messages.warnings,
      };

      return resolve(resolveArgs);
    });
  });
})
  .then(
    ({ stats, warnings }) => {
      if (warnings.length) {
        console.log(chalk.yellow("[iot:build] 编译完成，请查看警报信息。"));
        console.log(warnings.join("\n\n"));
      } else {
        console.log(chalk.green("[iot:build] 编译成功。"));
      }
    },
    (err) => {
      console.log(chalk.red("[iot:build] 编译失败。"));
      console.log(err);
      process.exit(1);
    }
  )
  .catch((err) => {
    if (err && err.message) {
      console.log(err.message);
    }
    process.exit(1);
  });