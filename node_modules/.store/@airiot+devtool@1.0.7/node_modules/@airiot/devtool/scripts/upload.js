const chalk = require("chalk");

const inquirer = require("inquirer");
const path = require("path");
const os = require("os");
const archiver = require("archiver");
const packlist = require('npm-packlist');

const fetch = require("node-fetch");
const FormData = require("form-data");
const fs = require("fs");

const paths = require("../config/paths");
const package = require(paths.appPackageJson);

const envs = process.env;
const args = process.argv;
let packageName = package.name;
const buildPath = 'dist'

const getOpt = (name, envName) => {
  let value
  const hostArgs = args.filter(arg => arg.startsWith(`--${name}=`))
  if(hostArgs.length != 0) {
    value = hostArgs[0].replace(`--${name}=`, '')
  } else if(envs[envName]) {
    value = envs[envName]
  }

  if(value && value.endsWith('/')) {
    value = value.substring(0, value.length - 1)
  }
  
  return value
}

const questions = [];
const forceQuestion = args.filter(arg => arg.startsWith("-f")).length != 0
const opts = {
  'host': getOpt('host', 'IOT_URL'),
  'username': getOpt('username', 'IOT_USER'),
  'password': getOpt('password', 'IOT_PASSWORD')
}

if (forceQuestion || !opts.host) {
  questions.push({ name: "host", message: "[iot] Host:" });
}
if (forceQuestion || !opts.username) {
  questions.push({ name: "username", message: "[iot] Username:" });
}
if (forceQuestion || !opts.password) {
  questions.push({ name: "password", message: "[iot] Password:", type: "password" });
}

const getFormData = () =>
  new Promise((resolve, reject) => {
    const form = new FormData();

    packlist({ path: paths.appPath })
    .then(files => {
      // 压缩包方式
      const archive = archiver("zip", {
        zlib: { level: 9 }, // Sets the compression level.
      });
      const fileKey = Math.ceil(Math.random() * 10000)
      const output = fs.createWriteStream(os.tmpdir() + "/package_"+fileKey +".zip");

      output.on("close", function () {
        form.append(
          "zipFile",
          fs.createReadStream(os.tmpdir() + "/package_"+fileKey +".zip")
        );
        resolve(form);
      });

      archive.pipe(output);
      files.forEach(f => archive.file(f));
      archive.finalize();
    })
  });

inquirer
  .prompt(questions)
  .then((answers) => {
    let host = answers.host || opts.host;
    let username = answers.username || opts.username;
    let password = answers.password || opts.password;

    host = host.endsWith("/") ? host : host + "/";
    
    // get use token from environment
    fetch(host + "rest/core/auth/login", {
      method: "POST",
      body: JSON.stringify({ username, password }),
      headers: { "Content-Type": "application/json", "Request-Type": "service" },
    })
      .then((res) => {
        if (res.status != 200) {
          throw new Error(res.text());
        } else {
          return res.json();
        }
      })
      .then((json) => {
        if (!json.token) {
          throw new Error(json);
        }
        const token = json.token;
        getFormData().then((form) => {
          console.log(chalk.yellow("[iot:upload] 上传中 ...... "));

          fetch(host + "rest/front/static/upload/" + packageName, {
            method: "POST",
            body: form,
            headers: { ...form.getHeaders(), Authorization: token, "Request-Type": "service" },
          })
            .then((res) => {
              if (res.status != 200) {
                res.text().then(text => console.log(chalk.red("[iot:install] 接口错误" +  "\n" + text)))
              } else {
                console.log(
                  chalk.green("[iot:upload] " + packageName + " 上传成功")
                );
              }
            })
            .catch((err) => console.log(chalk.red("\n" + err.toString())));
        });
      })
      .catch((err) =>
        console.error(chalk.red("[iot:upload] login failed" + "\n" + err.toString()))
      );
  })
  .catch((err) =>
    console.error(chalk.red("[iot:upload] login failed" + "\n" + err.toString()))
  );
