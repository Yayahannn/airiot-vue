const chalk = require("chalk");

const inquirer = require("inquirer");
const path = require("path");
const pacote = require('pacote');

const os = require("os");
const fs = require("fs");

const fetch = require("node-fetch");
const FormData = require("form-data");
const stream = require('stream');
 
const paths = require("../config/paths");
const package = require(paths.appPackageJson);

const envs = process.env;
const args = process.argv;
let packageName = package.name;

const getOpt = (name, envName) => {
  let value
  const hostArgs = args.filter(arg => arg.startsWith(`--${name}=`))
  if(hostArgs.length != 0) {
    value = hostArgs[0].replace(`--${name}=`, '')
  } else if(envs[envName]) {
    value = envs[envName]
  }

  if(value && value.endsWith('/')) {
    value = value.substring(0, value.length - 1)
  }
  
  return value
}

const questions = [];
const forceQuestion = args.filter(arg => arg.startsWith("-f")).length != 0
const opts = {
  'host': getOpt('ophost', 'IOT_OPURL'),
  'username': getOpt('username', 'IOT_OP_USER'),
  'password': getOpt('password', 'IOT_OP_PASSWORD'),
  'branch': getOpt('branch', 'IOT_BRANCH')
}

if (forceQuestion || !opts.host) {
  questions.push({ name: "host", message: "[iot] 运维网址:" });
}
if (forceQuestion || !opts.username) {
  questions.push({ name: "username", message: "[iot] 管理员用户:" });
}
if (forceQuestion || !opts.password) {
  questions.push({ name: "password", message: "[iot] 管理员密码:", type: "password" });
}
if (forceQuestion || !opts.branch) {
  questions.push({ name: "branch", message: "[iot] 部署版本(可跳过):" });
}

inquirer
  .prompt(questions)
  .then((answers) => {
    let host = answers.host || opts.host;
    let username = answers.username || opts.username;
    let password = answers.password || opts.password;
    let branch = answers.branch || opts.branch;

    host = host.endsWith("/") ? host : host + "/";
    
    // get use token from environment
    fetch(host + "api/login", {
      method: "POST",
      body: JSON.stringify({ username, password }),
      headers: { "Content-Type": "application/json", "Request-Type": "service" },
    })
      .then((res) => {
        if (res.status != 200) {
          throw new Error(res.text());
        } else {
          return res.json();
        }
      })
      .then((json) => {
        if (!json.accessToken) {
          throw new Error(json);
        }
        const token = `Bearer ${json.accessToken}`;

        pacote.tarball(paths.appPath).then(data => {
          
          const form = new FormData();

          const fileKey = Math.ceil(Math.random() * 10000)
          const fileName = os.tmpdir() + "/package_"+fileKey +".tgz"
          fs.writeFileSync(fileName, data)

          form.append(
            "file",
            fs.createReadStream(fileName)
          );
          if(branch) {
            form.append(
              "branch", branch
            )
          }
  
          console.log(chalk.yellow("[iot:install] 上传中 ...... "));
  
          fetch(host + "api/front/install", {
            method: "POST",
            body: form,
            headers: { ...form.getHeaders(), Authorization: token, "Request-Type": "service" },
          })
            .then((res) => {
              if (res.status != 200) {
                res.text().then(text => console.log(chalk.red("[iot:install] 接口错误" +  "\n" + text)))
              } else {
                console.log(
                  chalk.green("[iot:install] " + `成功安装 ${packageName} 到 ${host}`)
                );
              }
            })
            .catch((err) => console.log(chalk.red("\n" + err.toString())));
        })
        .catch(err => 
          console.error(chalk.red("[iot:install] 打包错误" + "\n" + err.toString()))
        )
      })
      .catch((err) =>
        console.error(chalk.red("[iot:install] 用户验证失败" + "\n" + err.toString()))
      );
  })
  .catch((err) =>
    console.error(chalk.red("[iot:install] 用户验证失败" + "\n" + err.toString()))
  );
