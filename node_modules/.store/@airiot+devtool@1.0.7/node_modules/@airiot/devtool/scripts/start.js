"use strict";

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = "development";
process.env.NODE_ENV = "development";

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on("unhandledRejection", (err) => {
  throw err;
});

// Ensure environment variables are read.
require("../config/env");

const chalk = require("chalk");
const webpack = require("webpack");
const WebpackDevServer = require("webpack-dev-server");
const portfinder = require("portfinder");
const configFactory = require("../config/webpack.config");
const createDevServerConfig = require("../config/webpackDevServer.config");
const { getHost } = require("../utils/envs");

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || "0.0.0.0";

const host = getHost();
let devServer;

console.log(chalk.green('[iot:envs] 请求 IOT_URL 为: ' + host))

configFactory("development", host).then((config) => {
  const compiler = webpack(config);
  const serverConfig = createDevServerConfig(host);
  devServer = new WebpackDevServer(compiler, serverConfig);

  portfinder.basePort = DEFAULT_PORT;

  portfinder.getPort((err, port) => {
    if (err) {
      throw err;
    }

    devServer.listen(port, HOST, (err) => {
      if (err) {
        return console.log(err);
      }
      console.log("[iot:dev] DEV Server已经启动，访问地址： http://" + HOST + ":" + port);
    });
  });
});

process.on("uncaughtException", function (err) {
  console.error(err.stack);
});

["SIGINT", "SIGTERM"].forEach(function (sig) {
  process.on(sig, function () {
    devServer && devServer.close();
    process.exit();
  });
});
