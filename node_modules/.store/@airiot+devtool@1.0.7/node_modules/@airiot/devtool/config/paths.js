'use strict';

const path = require('path');
const fs = require('fs');
const url = require('url');
const { createRequire } = require('module');

const appDirectory = fs.realpathSync(process.cwd());
const devtoolDirectory = path.resolve(__dirname, '..');

const resolveApp = relativePath => path.resolve(appDirectory, relativePath);
const resolveDevtool = relativePath => path.resolve(devtoolDirectory, relativePath);

function ensureSlash(inputPath, needsSlash) {
  const hasSlash = inputPath.endsWith('/');
  if (hasSlash && !needsSlash) {
    return inputPath.substr(0, inputPath.length - 1);
  } else if (!hasSlash && needsSlash) {
    return `${inputPath}/`;
  } else {
    return inputPath;
  }
}

const moduleFileExtensions = [
  'web.mjs',
  'mjs',
  'web.js',
  'js',
  'web.ts',
  'ts',
  'web.tsx',
  'tsx',
  'json',
  'web.jsx',
  'jsx',
];

// Resolve file paths in the same order as webpack
const resolveModule = (resolveFn, filePath) => {
  const extension = moduleFileExtensions.find(extension =>
    fs.existsSync(resolveFn(`${filePath}.${extension}`))
  );

  if (extension) {
    return resolveFn(`${filePath}.${extension}`);
  }

  return resolveFn(`${filePath}.js`);
};

const appRequire = createRequire(resolveModule(resolveApp, 'src/index'));
const ReactPath = appRequire.resolve('react');
const appNodeModules = path.resolve(ReactPath, '../..');

// config after eject: we're in ./config/
module.exports = {
  dotenv: resolveApp('.env'),
  appPath: resolveApp('.'),
  buildPath: resolveApp('dist'),
  appHtml: resolveDevtool('dist/index.html'),
  appIndexJs: resolveModule(resolveApp, 'src/index'),
  appFrontJs: resolveModule(resolveApp, 'src/front'),
  appDevIndexJs: resolveModule(resolveApp, 'src/dev'),
  appPackageJson: resolveApp('package.json'),
  appSrc: resolveApp('src'),
  appTsConfig: resolveApp('tsconfig.json'),
  appWebpackConfig: resolveApp('webpack.js'),
  developConfig: resolveApp('.dev.js'),
  testsSetup: resolveModule(resolveApp, 'src/setupTests'),
  devtoolDirectory: devtoolDirectory,
  devtoolBuild: resolveDevtool('dist'),
  devtoolNodeModules: resolveDevtool('node_modules'),
  proxySetup: resolveApp('src/setupProxy.js'),
  appNodeModules,
  clientBuildPath: path.resolve(appNodeModules, '@gtiot/iot-client/dist'),
};

module.exports.moduleFileExtensions = moduleFileExtensions;
