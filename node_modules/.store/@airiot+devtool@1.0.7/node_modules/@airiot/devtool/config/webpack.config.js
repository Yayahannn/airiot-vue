var path = require("path");
const { execFileSync, exec } = require('child_process');
const paths = require('./paths');

const fs = require('fs');
const HtmlWebPackPlugin = require("html-webpack-plugin");
const HtmlWebpackTagsPlugin = require('html-webpack-tags-plugin');
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const CreateFilePlugin = require('./createFile')

const webpack = require('webpack');
const { getBaseUrl, getModule } = require("../utils/envs");
const extConfig = require('./externals.json')

const isCI = process.env.CI &&
(typeof process.env.CI !== "string" ||
  process.env.CI.toLowerCase() !== "false")

const appPackage = require(paths.appPackageJson);

let appWebpackConfig;
try {
  appWebpackConfig = require(paths.appWebpackConfig)
} catch (err) {
  if(err.code != 'MODULE_NOT_FOUND') {
    throw err;
  }
}

let developConfig;
try {
  developConfig = require(paths.developConfig)
} catch (err) {
  if(err.code != 'MODULE_NOT_FOUND') {
    throw err;
  }
}

const gitInfo = (...args) => {
  return execFileSync('git', args, {
    cwd: paths.appPath,
    encoding: 'utf8',
    timeout: 7000,
  }).replace(/[^\da-z]*/gim, '')
}

function dateFtt(fmt, date) { //author: meizz 
  var o = {
    "M+": date.getMonth() + 1,     //月份 
    "d+": date.getDate(),     //日 
    "h+": date.getHours(),     //小时 
    "m+": date.getMinutes(),     //分 
    "s+": date.getSeconds(),     //秒 
    "q+": Math.floor((date.getMonth() + 3) / 3), //季度 
    "S": date.getMilliseconds()    //毫秒 
  };
  if (/(y+)/.test(fmt))
    fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
  for (var k in o)
    if (new RegExp("(" + k + ")").test(fmt))
      fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
  return fmt;
}

const findModule = (scripts, packageName) => {
  return scripts.find(s => s.indexOf(packageName) >= 0)
}

module.exports = async (env, host) => {
  const isEnvProduction = env === 'production'
  const module = getModule(env)
  const basePath = getBaseUrl(developConfig) + '/node_modules'
  
  const defaultModules = [
    '@airiot/core', '@airiot/theme'
  ]

  let scripts = (developConfig && typeof developConfig.scripts == 'function') 
    && developConfig.scripts(env, basePath, module) || []

  let scriptsAppend = appPackage.name == '@airiot/core'

  let dllScript = basePath + (isEnvProduction ? '/@airiot/dll/dist/iot.min.js' : '/@airiot/dll/dist/iot.js')
  scripts = scripts.filter(s => {
    if(s.indexOf("@airiot/dll") >= 0) {
      dllScript = s
      return false
    }
    return true
  });
  
  [ ...defaultModules, ...(appPackage.iotDependencies||[]) ].forEach(packageName => {
    if(packageName != appPackage.name && !findModule(scripts, packageName)) {
      scripts.push(basePath + '/' + packageName + (module == 'front' ? '/dist/front.js' : '/dist/index.js'))
    }
  })

  const addPublicPath = (path, publicPath) => {
    if((path.startsWith('http://') || path.startsWith('https://') || path.startsWith('//'))) {
      return path
    } else if(path.startsWith('/')) {
      return path
    } 
    return publicPath + path
  }

  const entry = {}
  if(module == 'admin' || module == 'all') {
    entry['index'] = paths.appIndexJs
  }
  if((module == 'front' || module == 'all') && fs.existsSync(paths.appFrontJs) ) {
    entry['front'] = paths.appFrontJs
  }

  appPackage.dependencies = {}

  if(!isCI) {
    try {
      gitInfo('log')
      const branch = gitInfo('rev-parse', '--abbrev-ref', 'HEAD')
      const longHead = gitInfo('rev-parse', 'HEAD')
      appPackage.gitHead = longHead
    
      if(branch != 'master' && branch != 'HEAD') {
        const gitHead = gitInfo('rev-parse', '--short', 'HEAD')
        appPackage.version =  appPackage.version + '+' + branch + '.' + gitHead
    
        appPackage.buildTime = dateFtt('yyyy-MM-dd hh:mm:ss', new Date())
        appPackage.buildUser = gitInfo('config', 'user.name')
      }
    } catch (error) {
      
    }
  }

  let config = {
    mode: env,
    entry,
    output: {
      path: paths.buildPath,
      filename: "[name].js",
      chunkFilename: "chunks/[name].[chunkhash].js",
      publicPath: 'auto',
      globalObject: 'this'
    },
    resolve: {
      alias: {
        '@': paths.appSrc
      },
      modules: ['node_modules'].concat(
        process.env.NODE_PATH.split(path.delimiter).filter(Boolean)
      ),
      fallback: {
        path: require.resolve("path-browserify")
      },
      extensions: [".ts", ".tsx", ".js", ".json", ".vue"]
    },
    externals: extConfig.externals,
    module: {
      rules: [
        {
          test: /\.(js|jsx)$/,
          exclude: /node_modules/,
          use: {
            loader: require.resolve("babel-loader"),
            options: {
              presets: [
                require.resolve("@babel/preset-env"),
                require.resolve("@babel/preset-react")
              ],
              plugins: [
                require.resolve("@babel/plugin-transform-runtime"),
                require.resolve("@babel/plugin-proposal-object-rest-spread"),
                [require.resolve("@babel/plugin-proposal-decorators"), { "legacy": true }],
                require.resolve("@babel/plugin-proposal-class-properties")
              ]
            }
          }
        },
        {
          test: /\.css$/,
          use: [
            require.resolve('style-loader'),
            require.resolve('css-loader')
          ]
        },
        {
          test: /^((?!theme).)+\.less$/,
          use: [
            require.resolve('style-loader'),
            require.resolve('css-loader'),
            {
              loader: require.resolve('less-loader'),
              options: {
                lessOptions: {
                  javascriptEnabled: true,
                }
              }
            }
          ]
        },
        {
          test: /\.theme\.less$/,
          use: [
            {
              loader: require.resolve('file-loader'),
              options: {
                name: '[hash].theme.css',
                publicPath: '/',
                postTransformPublicPath: (p) => `document.currentScript.src.substring(0, document.currentScript.src.lastIndexOf('/')) + ${p}`,
                esModule: false,
              },
            },
            {
              loader: require.resolve('less-loader'),
              options: {
                lessOptions: {
                  javascriptEnabled: true,
                }
              }
            }
          ]
        },
        {
          test: /\.svg$/,
          oneOf: [
            {
              resourceQuery: /inline/,
              loader: require.resolve("url-loader"),
              options: {
                esModule: false,
              }
            },
            {
              loader: require.resolve('svg-inline-loader')
            }
          ]
        },
        {
          test: /\.html$/,
          use: [
            {
              loader: require.resolve("html-loader")
            }
          ]
        },
        {
          test: /\.(jpg|png|gif|ttf)/,
          use: [
            {
              loader: require.resolve("file-loader"),
              options: {
                esModule: false,
              }
            }
          ]
        }
      ]
    },
    plugins: isEnvProduction ? [
      new CleanWebpackPlugin(),
      !isCI && new CreateFilePlugin({
        path: paths.buildPath,
        fileName: '.buildinfo.json',
        content: JSON.stringify(appPackage, 0, 2)
      }),
      process.env.WITH_ANALYZER && new BundleAnalyzerPlugin()
    ].filter(Boolean) : [
      new HtmlWebPackPlugin({
        template: paths.appHtml,
        filename: "./index.html"
      }),
      new HtmlWebpackTagsPlugin({ scripts, append: scriptsAppend, addPublicPath }),
      new HtmlWebpackTagsPlugin({ scripts: dllScript, append: false, addPublicPath }),
      new HtmlWebpackTagsPlugin({ scripts: ['start.js'], append: true }),
      new webpack.HotModuleReplacementPlugin()
    ].filter(Boolean),
    devtool: isEnvProduction ? 'nosources-source-map' : 'eval-cheap-module-source-map',
    performance: {
      hints: false
    }
  }
  if(appWebpackConfig && typeof appWebpackConfig === 'function') {
    config = appWebpackConfig(config)
  }
  return config
};
