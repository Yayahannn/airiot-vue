"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "i18next", {
  enumerable: true,
  get: function get() {
    return _i18next.default;
  }
});
exports.default = exports._t = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _moment = _interopRequireDefault(require("moment"));

var _i18next = _interopRequireDefault(require("i18next"));

var _i18nextXhrBackend = _interopRequireDefault(require("i18next-xhr-backend"));

var _i18nextLocalstorageCache = _interopRequireDefault(require("i18next-localstorage-cache"));

var _i18nextBrowserLanguagedetector = _interopRequireDefault(require("i18next-browser-languagedetector"));

var _xadmin = _interopRequireDefault(require("xadmin"));

var _translation = _interopRequireDefault(require("./zh_Hans/translation.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var locales = {
  zh_Hans: {
    translation: _translation.default
  }
};

var _t = function _t() {
  return _xadmin.default.context._t(...arguments);
};

exports._t = _t;
var _default = {
  name: 'xadmin.i18n',
  items: {
    locales: {
      type: 'mapArray'
    }
  },
  context: app => (context, cb) => {
    var resources = app.get('locales');
    var {
      locale
    } = app.get('config');

    for (var ln in resources) {
      resources[ln] = _lodash.default.merge({}, ...resources[ln]);
    }

    _i18next.default.use(_i18nextXhrBackend.default) // or any other backend implementation
    .use(_i18nextLocalstorageCache.default) // or any other cache implementation
    .use(_i18nextBrowserLanguagedetector.default) // or any other implementation
    .init(_objectSpread({
      debug: false,
      lng: 'en',
      fallbackLng: false,
      keySeparator: false,
      nsSeparator: false,
      resources
    }, locale || {}), (err, t) => {
      _moment.default.locale(locale && locale.moment || 'en');

      cb(null, _objectSpread(_objectSpread({}, context), {}, {
        _t: t,
        i18n: _i18next.default
      }));
    });
  },
  locales
};
exports.default = _default;