function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import _ from 'lodash';

var block = function block(tag) {
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var app = window.__app__;
  var blocks = app.get('blocks');

  if (blocks[tag] !== undefined) {
    var nodes = blocks[tag].reduce((prev, block) => {
      var ret = block(_objectSpread({
        nodes: prev
      }, props));

      if (ret != undefined && ret != null && ret != prev) {
        if (Array.isArray(ret)) {
          prev = prev.concat(ret.map(c => /*#__PURE__*/React.cloneElement(c, props)));
        } else if ( /*#__PURE__*/React.isValidElement(ret)) {
          prev.push( /*#__PURE__*/React.cloneElement(ret, props));
        }
      }

      return prev;
    }, []);

    if (nodes.length && nodes.filter(node => node !== null).length > 0) {
      return nodes;
    }
  }

  return null;
};

var Block = (_ref) => {
  var {
    name,
    children
  } = _ref,
      props = _objectWithoutProperties(_ref, ["name", "children"]);

  var bs = block(name, props);
  return _.isFunction(children) ? children(bs ? React.Children.toArray(bs) : null) : React.Children.toArray(bs);
};

export { Block, block };