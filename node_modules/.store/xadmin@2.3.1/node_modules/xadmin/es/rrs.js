function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import _ from 'lodash';
import { browserHistory, hashHistory, Router } from 'react-router';
import { applyMiddleware, combineReducers, compose, createStore } from 'redux';
import createSagaMiddleware from 'redux-saga'; // redux app

var redux_app = {
  items: {
    reducers: {
      type: 'mapArray'
    },
    'redux/subscribe': {
      type: 'array'
    },
    'redux/on_create': {
      type: 'array'
    },
    'redux/middlewares': {
      type: 'array'
    },
    'redux/store_enhancers': {
      type: 'array'
    },
    'redux/reducer_enhance': {
      type: 'mapArray'
    }
  },
  context: app => (context, cb) => {
    var enhancers = [applyMiddleware(...app.get('redux/middlewares')), ...app.$('redux/store_enhancers')];

    var enhance_reducer = (key, reducer) => {
      var reducer_enhance = app.get('redux/reducer_enhance');

      if (reducer_enhance[key] !== undefined) {
        var reducers = [reducer, ...reducer_enhance[key]];
        return (state, action) => {
          return reducers.reduce((prev, reducer) => reducer(prev, action), state);
        };
      }

      return reducer;
    };

    var combine_reducer = (key, reducers) => {
      if (reducers.length > 1) {
        return (state, action) => {
          return reducers.reduce((prev, reducer) => reducer(prev, action), state);
        };
      } else {
        return reducers[0];
      }
    };

    var create_reducers = () => {
      var reducers_map = app.get('reducers');
      var reducers = {};

      for (var key in reducers_map) {
        reducers[key] = combine_reducer(key, reducers_map[key]);
      }

      return combineReducers(reducers);
    };

    var composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // create store

    var store = createStore(create_reducers(), context['initial_state'] || {}, composeEnhancers(...enhancers));
    cb(null, _objectSpread(_objectSpread({}, context), {}, {
      store
    }));
  },
  start: app => () => {
    // store change
    var {
      store
    } = app.context;
    var listeners = app.get('redux/subscribe');

    for (var listener of listeners) {
      store.subscribe(listener);
    }

    app.get('redux/on_create').forEach(callback => callback(store));
  }
}; // saga app

var sagaMiddleware = createSagaMiddleware();
var sage_app = {
  items: {
    effects: {
      type: 'array'
    }
  },
  context: app => (context, cb) => {
    // extend store
    var {
      store
    } = context;
    store.runSaga = sagaMiddleware.run; // start saga

    var effects = app.get('effects');
    effects.forEach(sagaMiddleware.run);
    cb(null, context);
  },
  'redux/middlewares': app => {
    return sagaMiddleware;
  }
}; // react & react-router app

var react_app = {
  items: {
    routers: {
      type: 'mapArray'
    },
    root_component: {
      type: 'array'
    }
  },
  context: app => (context, cb) => {
    app.go = uri => {
      app.context.router.push(uri);
    };

    var routerType = app.config('router') || 'browser';
    var router = typeof routerType === 'string' ? {
      browser: browserHistory,
      hash: hashHistory
    }[routerType] : routerType;
    cb(null, _objectSpread(_objectSpread({}, context), {}, {
      router
    }));
  },
  start: app => () => {
    // init container
    var {
      container = '#app'
    } = app.context;

    if (typeof container === 'string') {
      container = document.querySelector(container);
    }

    var rs = app.get('routers');

    var find_childs = path => {
      return (rs[path] || []).map(r => {
        var childs = find_childs((path == '@' ? '' : path) + r.path);
        return childs.length > 0 ? _objectSpread(_objectSpread({}, r), {}, {
          childRoutes: [...(r.childRoutes || []), ...childs]
        }) : r;
      });
    };

    var routers = find_childs('@');
    var root = app.get('root_component').reduce((children, render) => {
      return render(children);
    }, routers && routers.length ? /*#__PURE__*/React.createElement(Router, {
      history: app.context.router,
      routes: routers[0]
    }) : /*#__PURE__*/React.createElement("span", null, "Please config routers or Main component."));
    ReactDOM.render(root, container);
  }
}; // react-redux app

var react_redux_app = {
  root_component: app => children => /*#__PURE__*/React.createElement(Provider, {
    store: app.context.store
  }, children),
  hooks: app => ({
    'redux': (props, select) => {
      var store = app.context.store;
      var {
        getState,
        dispatch,
        subscribe
      } = store;

      if (select) {
        var state = getState();
        var [values, setValues] = React.useState(select(state) || {});
        var lastValues = React.useRef();
        lastValues.current = values;

        var updateState = () => {
          var newValues = select(getState());

          if (!_.isEqual(lastValues.current, newValues)) {
            setValues(newValues);
          }
        };

        React.useEffect(() => {
          return subscribe(updateState);
        }, []);
        return _objectSpread(_objectSpread({}, props), {}, {
          store,
          dispatch: dispatch,
          state
        }, values);
      } else {
        return _objectSpread(_objectSpread({}, props), {}, {
          store,
          dispatch: dispatch,
          state: getState()
        });
      }
    }
  })
};
export default (app => {
  return app.use(redux_app).use(sage_app).use(react_app).use(react_redux_app);
});