function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

export default class RESTBaseAPI {
  constructor(options) {
    this.options = options;
    this.resource = options.resource || options.name;
  }

  getHost() {
    return '/';
  }

  fetch(id, options) {
    throw 'App API not implement!!!';
  }

  count() {
    var where = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return this.fetch().then(ds => ds.length);
  }

  query() {
    var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var wheres = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return this.fetch().then(ds => ({
      total: ds.length,
      items: ds.slice(filter.skip || 0, (filter.skip || 0) + parseInt(filter.limit || 15))
    }));
  }

  get() {
    var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    return this.fetch(id);
  }

  delete(id) {
    return this.fetch(id, {
      method: 'DELETE'
    });
  }

  put(id, data) {
    return this.fetch(id, {
      method: 'PUT',
      body: JSON.stringify(data)
    }).then(item => {
      return _objectSpread(_objectSpread({}, data), item);
    });
  }

  patch(id, data) {
    return this.fetch(id, {
      method: 'PATCH',
      body: JSON.stringify(data)
    }).then(item => {
      return _objectSpread(_objectSpread({}, data), item);
    });
  }

  post(data) {
    return this.fetch(null, {
      method: 'POST',
      body: JSON.stringify(data)
    }).then(item => {
      return _objectSpread(_objectSpread({}, data), item);
    });
  }

  save(data, partial) {
    if (data.id) {
      var id = data.id;

      if (partial) {
        return this.patch(id, data);
      }

      return this.put(id, data);
    } else {
      return this.post(data);
    }
  }

}