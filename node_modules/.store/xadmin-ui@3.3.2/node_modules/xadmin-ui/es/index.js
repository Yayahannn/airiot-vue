function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import app from 'xadmin';
import { Navigate } from 'react-router-dom'; // import loading from './loading'

import splashscreen from './splashscreen';

var C = args => {
  if (typeof args == 'string') {
    return app.get('components')[args];
  } else {
    var {
      is
    } = args,
        props = _objectWithoutProperties(args, ["is"]);

    var Component = C(is);
    if (Component) return /*#__PURE__*/React.createElement(Component, props);else return /*#__PURE__*/React.createElement("div", null, "Component ", is, " not found.");
  }
};

C.lazy = is => props => C(_objectSpread({
  is
}, props));

var Main = C.lazy('Main');
var App = C.lazy('App');
var Dashboard = C.lazy('Dashboard');
var Page = C.lazy('Page');
var Icon = C.lazy('Icon');
var Loading = C.lazy('Loading');
var Dropdown = C.lazy('Dropdown');
var Menu = C.lazy('Menu');
Menu.SubMenu = C.lazy('Menu.SubMenu');
Menu.Item = C.lazy('Menu.Item');
/** UI Components */

var Badge = C.lazy('Badge');
var Card = C.lazy('Card');
var Modal = C.lazy('Modal');
var Button = C.lazy('Button');
var Popover = C.lazy('Popover');
var Tooltip = C.lazy('Tooltip');
var Table = C.lazy('Table');
var Tabs = C.lazy('Tabs');
Tabs.Item = C.lazy('Tabs.Item');
var Empty = C.lazy('Empty');
var List = C.lazy('List');
List.Item = C.lazy('List.Item');
var Alert = C.lazy('Alert');
var Input = C.lazy('Input');
Input.Static = C.lazy('Input.Static');
var Check = C.lazy('Check');
var Select = C.lazy('Select');

var lazy = (fn, fallback) => {
  var Component = /*#__PURE__*/React.lazy(fn);
  return /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(React.Suspense, {
    fallback: fallback || /*#__PURE__*/React.createElement(Loading, null)
  }, /*#__PURE__*/React.createElement(Component, _extends({
    ref: ref
  }, props))));
};

export default {
  name: 'xadmin.ui',
  items: {
    components: {
      type: 'map'
    }
  },
  routers: {
    '@': {
      path: '/',
      component: Main
    },
    '/': [{
      index: true,
      element: /*#__PURE__*/React.createElement(Navigate, {
        to: "/app/",
        replace: true
      })
    }, {
      path: 'app/',
      component: App
    }],
    '/app/': [{
      index: true,
      component: Dashboard
    }, {
      path: 'dashboard',
      component: Dashboard
    }]
  },
  reducers: {
    loading: function loading() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var {
        type,
        key
      } = arguments.length > 1 ? arguments[1] : undefined;

      if (!key) {
        return state;
      }

      switch (type) {
        case 'START_LOADING':
          return _objectSpread(_objectSpread({}, state), {}, {
            [key]: true
          });

        case 'END_LOADING':
          return _objectSpread({}, _.omit(state, key));

        default:
          return state;
      }
    }
  }
};
var apps = {
  splashscreen
};
export { C, lazy, Page, Icon, Loading, Main, Dashboard, App, Dropdown, Menu, Badge, Card, Modal, Button, Popover, Tooltip, Table, Tabs, Empty, List, Alert, Input, Check, Select, apps };