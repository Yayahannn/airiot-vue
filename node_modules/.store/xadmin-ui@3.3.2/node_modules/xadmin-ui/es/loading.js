function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import omit from 'lodash/omit';
import LoadingBar, { loadingBarReducer, showLoading, hideLoading } from 'react-redux-loading-bar';
import { takeEvery, put, all } from 'redux-saga/effects';
export default {
  name: 'xadmin.loading',
  blocks: {
    'body': () => /*#__PURE__*/React.createElement(LoadingBar, {
      key: "loading",
      style: {
        zIndex: 9999,
        height: 3,
        position: 'absolute',
        backgroundColor: 'rgba(82, 196, 26, 0.45)'
      }
    })
  },
  reducers: {
    loadingBar: function loadingBar() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var action = arguments.length > 1 ? arguments[1] : undefined;

      switch (action.type) {
        case 'persist/REHYDRATE':
          return 0;

        default:
          return loadingBarReducer(state, action);
      }
    },
    loading: function loading() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var {
        type,
        key
      } = arguments.length > 1 ? arguments[1] : undefined;

      if (!key) {
        return state;
      }

      switch (type) {
        case 'START_LOADING':
          return _objectSpread(_objectSpread({}, state), {}, {
            [key]: true
          });

        case 'END_LOADING':
          return _objectSpread({}, omit(state, key));

        default:
          return state;
      }
    }
  },
  effects: app => function* () {
    yield all([takeEvery('START_LOADING', function* () {
      yield put(showLoading());
    }), takeEvery('END_LOADING', function* () {
      yield put(hideLoading());
    })]);
  }
};