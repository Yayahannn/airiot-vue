function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState, useEffect } from 'react';
import { app, config, use } from 'xadmin';
import { Form as RForm, useForm as rUseForm } from 'react-final-form';
import arrayMutators from 'final-form-arrays';
import { C } from 'xadmin-ui';
import { _t } from 'xadmin-i18n';
import { fieldBuilder, objectBuilder, prefixFieldKey } from './builder';
import Ajv from 'ajv';
import _ from 'lodash';
import ajvLocalize from './locales';
import { convert as schemaConvert } from './schema';
import { findFieldByName } from './utils';
var datetimeRegex = /^[1-9]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\s+(20|21|22|23|[0-1]\d):[0-5]\d:[0-5]\d$/;
var ajv = new Ajv({
  allErrors: true,
  verbose: true,
  nullable: true,
  formats: {
    datetime: datetimeRegex
  }
});

var BaseForm = props => {
  var {
    effect,
    fields,
    render,
    option,
    component,
    children,
    handleSubmit,
    errors
  } = props,
      formProps = _objectWithoutProperties(props, ["effect", "fields", "render", "option", "component", "children", "handleSubmit", "errors"]);

  var {
    form
  } = use('form');
  var invalid = !(_.isNil(errors) || _.isEmpty(errors));
  var fieldValidate = React.useCallback((value, values, meta) => {
    var _meta$data;

    if ((_meta$data = meta.data) !== null && _meta$data !== void 0 && _meta$data.required) {
      if (!_.isNumber(value) && _.isEmpty(value)) {
        var _findFieldByName;

        return _t("{{label}} is required", {
          label: ((_findFieldByName = findFieldByName(meta.name, fields)) === null || _findFieldByName === void 0 ? void 0 : _findFieldByName.label) || meta.name
        });
      }
    }
  }, [fields]);
  var build_fields = objectBuilder(fields, render, _objectSpread(_objectSpread(_objectSpread({
    form
  }, option), {}, {
    invalid
  }, formProps), {}, {
    fieldValidate
  }));
  useEffect(() => effect && effect(form), [form]);

  if (component) {
    var FormComponent = component;
    return /*#__PURE__*/React.createElement(FormComponent, _extends({}, props, {
      invalid: invalid
    }), build_fields);
  } else if (children) {
    return children(_objectSpread(_objectSpread({}, props), {}, {
      invalid,
      children: build_fields
    }));
  } else {
    var _FormComponent = C('Form.Layout');

    return /*#__PURE__*/React.createElement(_FormComponent, _extends({}, props, {
      invalid: invalid
    }), build_fields);
  }
};

var isPromise = obj => !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';

var Form = props => {
  var {
    formKey,
    validate,
    effect,
    fields,
    render,
    option,
    component,
    children,
    wrapProps,
    onChange,
    onSubmitSuccess,
    onSubmit,
    data,
    formRef
  } = props,
      formProps = _objectWithoutProperties(props, ["formKey", "validate", "effect", "fields", "render", "option", "component", "children", "wrapProps", "onChange", "onSubmitSuccess", "onSubmit", "data", "formRef"]);

  var formConfig = config('form-config');
  var mutators = {
    setFieldData: (_ref, state) => {
      var [name, data] = _ref;
      var field = state.fields[name];

      if (field) {
        field.data = _objectSpread(_objectSpread({}, field.data), data);
      }
    }
  };

  var formEffect = form => {
    if (onChange != undefined && typeof onChange === 'function') {
      form.useEffect((_ref2) => {
        var {
          values
        } = _ref2;
        var {
          dirty,
          modified
        } = form.getState();

        if (dirty || _.some(Object.values(modified))) {
          onChange(values);
        }
      }, ['values']);
    }

    if (onSubmitSuccess != undefined && typeof onSubmitSuccess === 'function') {
      form.useEffect((_ref3) => {
        var {
          submitSucceeded
        } = _ref3;
        submitSucceeded && onSubmitSuccess(form.submitReturnValue || form.getState().values, form);
      }, ['submitSucceeded']);
    }

    form.data = data;

    if (formRef) {
      formRef.current = form;
    }

    effect && effect(form);
  };

  var onSubmitHandler = React.useCallback((values, form, callback) => {
    var result = onSubmit(values, form, callback);

    if (result && isPromise(result)) {
      return new Promise((resolve, reject) => {
        result.then(retValue => {
          form.submitReturnValue = retValue;
          resolve();
        }).catch(err => {
          resolve(err);
        });
      });
    } else if (onSubmit.length < 3) {
      callback(result);
    }
  }, [onSubmit]);
  return /*#__PURE__*/React.createElement(RForm, _extends({
    key: formKey,
    validate: validate,
    mutators: _objectSpread(_objectSpread({}, arrayMutators), mutators),
    onSubmit: onSubmitHandler,
    subscription: {
      submitting: true,
      pristine: true,
      errors: true,
      submitErrors: true
    }
  }, formConfig, formProps, wrapProps), props => /*#__PURE__*/React.createElement(BaseForm, _extends({}, props, {
    effect: formEffect,
    fields: fields,
    render: render,
    option: option,
    component: component,
    children: children
  })));
};

var omitNull = value => {
  if (_.isPlainObject(value)) {
    Object.keys(value).forEach(k => {
      var ret = omitNull(value[k]);

      if (ret == null) {
        delete value[k];
      } else {
        value[k] = ret;
      }
    });
  } else if (_.isArray(value)) {
    value.forEach(omitNull);
  }

  return value;
};

var SchemaForm = props => {
  var {
    schema
  } = props;
  var formRef = React.useRef();

  if (!_.isPlainObject(schema)) {
    return null;
  }

  var {
    fields
  } = schemaConvert(schema);

  var validate = vs => {
    var values = _.cloneDeep(vs);

    var ajValidate = ajv.compile(schema);
    var valid = ajValidate(omitNull(values));

    if (!valid) {
      var {
        i18n
      } = app.context;

      if (i18n && ajvLocalize[i18n.language]) {
        ajvLocalize[i18n.language](ajValidate.errors);
      } else {
        ajvLocalize['en'](ajValidate.errors);
      }
    }

    var errors = props.validate && _.isFunction(props.validate) ? props.validate(values) : {};
    errors = valid ? errors : ajValidate.errors.reduce((prev, err) => {
      var p = err.dataPath;

      if (err.keyword == 'required' && err.params.missingProperty) {
        if (err.params.missingProperty.indexOf('-') >= 0) {
          p += "['".concat(err.params.missingProperty, "']");
        } else {
          p += '.' + err.params.missingProperty;
        }
      }

      if (p.startsWith('.')) p = p.substring(1);

      _.set(prev, p, err.message);

      return prev;
    }, errors);
    return errors;
  };

  return /*#__PURE__*/React.createElement(Form, _extends({}, props, {
    validate: validate,
    fields: fields,
    effect: schema.formEffect,
    formRef: formRef
  }));
};

var useForm = select => {
  var form = rUseForm();
  var formState = form.getState();
  var [values, setValues] = React.useState(select ? select(formState) : {});

  form.useField = function (name, subscriber) {
    var effects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['value'];
    form.registerField(name, subscriber, effects && effects.reduce((prev, ef) => {
      prev[ef] = true;
      return prev;
    }, {}));
  };

  form.setFieldData = form.mutators.setFieldData;

  form.useEffect = function (subscriber) {
    var effects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['values'];
    form.subscribe(subscriber, effects && effects.reduce((prev, ef) => {
      prev[ef] = true;
      return prev;
    }, {}));
  };

  React.useEffect(() => {
    if (select) {
      form.subscribe(state => {
        setValues(select(state));
      }, {
        values: true
      });
    }
  }, []);
  return _objectSpread(_objectSpread({}, values), {}, {
    form,
    getFormState: form.getState,
    formState
  });
};

export { BaseForm, Form, SchemaForm, useForm, fieldBuilder, objectBuilder, prefixFieldKey, schemaConvert };