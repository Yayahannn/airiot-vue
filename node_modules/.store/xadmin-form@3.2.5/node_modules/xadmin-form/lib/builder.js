"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prefixFieldKey = exports.fieldBuilder = exports.objectBuilder = exports.defaultUIRender = void 0;

var _react = _interopRequireDefault(require("react"));

var _xadmin = _interopRequireWildcard(require("xadmin"));

var _reactFinalForm = require("react-final-form");

var _xadminUi = require("xadmin-ui");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var FieldWrapComponent = (_ref) => {
  var {
    fieldComponent: FieldComponent,
    group: FieldGroup
  } = _ref,
      props = _objectWithoutProperties(_ref, ["fieldComponent", "group"]);

  var {
    data
  } = props.meta;
  var {
    effect,
    formEffect,
    name
  } = props.field;
  var {
    form
  } = (0, _xadmin.use)('form');

  _react.default.useEffect(() => {
    formEffect && formEffect(form, props);

    if (effect) {
      form.useField(name, state => effect(state, form, props.field));
    }
  }, [form]);

  if (data.display === false) {
    return null;
  }

  var newField = data.field ? _objectSpread(_objectSpread({}, props.field), data.field) : props.field;

  if (data.required === true) {
    newField.required = true;
  }

  return FieldComponent.useGroup === false ? /*#__PURE__*/_react.default.createElement(FieldComponent, _extends({}, props, {
    field: newField,
    group: FieldGroup
  })) : /*#__PURE__*/_react.default.createElement(FieldGroup, _extends({}, props, {
    field: newField
  }), /*#__PURE__*/_react.default.createElement(FieldComponent, _extends({}, props, {
    field: newField,
    group: FieldGroup
  })));
};

var defaultUIRender = (fields, option) => {
  return fields.map(field => fieldBuilder(field, option));
};

exports.defaultUIRender = defaultUIRender;

var objectBuilder = (fields, render, option) => {
  var fields_defined = option.fieldsDefined ? _objectSpread(_objectSpread({}, _xadmin.default.get('form_fields')), option.fieldsDefined) : _xadmin.default.get('form_fields');
  var fields_wraped = fields.filter(field => field.type === undefined || fields_defined[field.type] !== undefined).map(field => {
    return _objectSpread(_objectSpread(_objectSpread({}, fields_defined[field.type || 'text']), field), {}, {
      option
    });
  }).map(field => option.fieldValidate ? _objectSpread(_objectSpread({}, field), {}, {
    validate: field.validate ? function () {
      return field.validate(...arguments) || option.fieldValidate(...arguments);
    } : option.fieldValidate
  }) : field);
  return (render || defaultUIRender)(fields_wraped, option);
};

exports.objectBuilder = objectBuilder;

var fieldBuilder = function fieldBuilder(field, option) {
  for (var _len = arguments.length, props = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    props[_key - 2] = arguments[_key];
  }

  if (field.render) {
    return field.render(field, option, fieldBuilder, objectBuilder, ...props);
  } else {
    var {
      name,
      component: FieldComponent,
      group,
      type
    } = field,
        fieldProps = _objectWithoutProperties(field, ["name", "component", "group", "type"]);

    var FieldGroup = group || (option && option.group ? option.group : (0, _xadminUi.C)('Form.FieldGroup'));
    return /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, _extends({
      name: name
    }, fieldProps, {
      component: FieldWrapComponent,
      field: field,
      option: option,
      group: FieldGroup,
      fieldComponent: FieldComponent
    }, props));
  }
};

exports.fieldBuilder = fieldBuilder;

var prefixFieldKey = (field, prefix) => {
  var f = _objectSpread(_objectSpread({}, field), {}, {
    key: prefix + field.key,
    name: prefix + field.name
  });

  if (field.fields && field.fields.length > 0) {
    f.fields = field.fields.map(cf => prefixFieldKey(cf, prefix));
  }

  return f;
};

exports.prefixFieldKey = prefixFieldKey;