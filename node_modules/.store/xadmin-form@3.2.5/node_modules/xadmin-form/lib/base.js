"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "fieldBuilder", {
  enumerable: true,
  get: function get() {
    return _builder.fieldBuilder;
  }
});
Object.defineProperty(exports, "objectBuilder", {
  enumerable: true,
  get: function get() {
    return _builder.objectBuilder;
  }
});
Object.defineProperty(exports, "prefixFieldKey", {
  enumerable: true,
  get: function get() {
    return _builder.prefixFieldKey;
  }
});
Object.defineProperty(exports, "schemaConvert", {
  enumerable: true,
  get: function get() {
    return _schema.convert;
  }
});
exports.useForm = exports.SchemaForm = exports.Form = exports.BaseForm = void 0;

var _react = _interopRequireWildcard(require("react"));

var _xadmin = require("xadmin");

var _reactFinalForm = require("react-final-form");

var _finalFormArrays = _interopRequireDefault(require("final-form-arrays"));

var _xadminUi = require("xadmin-ui");

var _xadminI18n = require("xadmin-i18n");

var _builder = require("./builder");

var _ajv = _interopRequireDefault(require("ajv"));

var _lodash = _interopRequireDefault(require("lodash"));

var _locales = _interopRequireDefault(require("./locales"));

var _schema = require("./schema");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var datetimeRegex = /^[1-9]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\s+(20|21|22|23|[0-1]\d):[0-5]\d:[0-5]\d$/;
var ajv = new _ajv.default({
  allErrors: true,
  verbose: true,
  nullable: true,
  formats: {
    datetime: datetimeRegex
  }
});

var BaseForm = props => {
  var {
    effect,
    fields,
    render,
    option,
    component,
    children,
    handleSubmit,
    errors
  } = props,
      formProps = _objectWithoutProperties(props, ["effect", "fields", "render", "option", "component", "children", "handleSubmit", "errors"]);

  var {
    form
  } = (0, _xadmin.use)('form');
  var invalid = !(_lodash.default.isNil(errors) || _lodash.default.isEmpty(errors));

  var fieldValidate = _react.default.useCallback((value, values, meta) => {
    var _meta$data;

    if ((_meta$data = meta.data) !== null && _meta$data !== void 0 && _meta$data.required) {
      if (!_lodash.default.isNumber(value) && _lodash.default.isEmpty(value)) {
        var _findFieldByName;

        return (0, _xadminI18n._t)("{{label}} is required", {
          label: ((_findFieldByName = (0, _utils.findFieldByName)(meta.name, fields)) === null || _findFieldByName === void 0 ? void 0 : _findFieldByName.label) || meta.name
        });
      }
    }
  }, [fields]);

  var build_fields = (0, _builder.objectBuilder)(fields, render, _objectSpread(_objectSpread(_objectSpread({
    form
  }, option), {}, {
    invalid
  }, formProps), {}, {
    fieldValidate
  }));
  (0, _react.useEffect)(() => effect && effect(form), [form]);

  if (component) {
    var FormComponent = component;
    return /*#__PURE__*/_react.default.createElement(FormComponent, _extends({}, props, {
      invalid: invalid
    }), build_fields);
  } else if (children) {
    return children(_objectSpread(_objectSpread({}, props), {}, {
      invalid,
      children: build_fields
    }));
  } else {
    var _FormComponent = (0, _xadminUi.C)('Form.Layout');

    return /*#__PURE__*/_react.default.createElement(_FormComponent, _extends({}, props, {
      invalid: invalid
    }), build_fields);
  }
};

exports.BaseForm = BaseForm;

var isPromise = obj => !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';

var Form = props => {
  var {
    formKey,
    validate,
    effect,
    fields,
    render,
    option,
    component,
    children,
    wrapProps,
    onChange,
    onSubmitSuccess,
    onSubmit,
    data,
    formRef
  } = props,
      formProps = _objectWithoutProperties(props, ["formKey", "validate", "effect", "fields", "render", "option", "component", "children", "wrapProps", "onChange", "onSubmitSuccess", "onSubmit", "data", "formRef"]);

  var formConfig = (0, _xadmin.config)('form-config');
  var mutators = {
    setFieldData: (_ref, state) => {
      var [name, data] = _ref;
      var field = state.fields[name];

      if (field) {
        field.data = _objectSpread(_objectSpread({}, field.data), data);
      }
    }
  };

  var formEffect = form => {
    if (onChange != undefined && typeof onChange === 'function') {
      form.useEffect((_ref2) => {
        var {
          values
        } = _ref2;
        var {
          dirty,
          modified
        } = form.getState();

        if (dirty || _lodash.default.some(Object.values(modified))) {
          onChange(values);
        }
      }, ['values']);
    }

    if (onSubmitSuccess != undefined && typeof onSubmitSuccess === 'function') {
      form.useEffect((_ref3) => {
        var {
          submitSucceeded
        } = _ref3;
        submitSucceeded && onSubmitSuccess(form.submitReturnValue || form.getState().values, form);
      }, ['submitSucceeded']);
    }

    form.data = data;

    if (formRef) {
      formRef.current = form;
    }

    effect && effect(form);
  };

  var onSubmitHandler = _react.default.useCallback((values, form, callback) => {
    var result = onSubmit(values, form, callback);

    if (result && isPromise(result)) {
      return new Promise((resolve, reject) => {
        result.then(retValue => {
          form.submitReturnValue = retValue;
          resolve();
        }).catch(err => {
          resolve(err);
        });
      });
    } else if (onSubmit.length < 3) {
      callback(result);
    }
  }, [onSubmit]);

  return /*#__PURE__*/_react.default.createElement(_reactFinalForm.Form, _extends({
    key: formKey,
    validate: validate,
    mutators: _objectSpread(_objectSpread({}, _finalFormArrays.default), mutators),
    onSubmit: onSubmitHandler,
    subscription: {
      submitting: true,
      pristine: true,
      errors: true,
      submitErrors: true
    }
  }, formConfig, formProps, wrapProps), props => /*#__PURE__*/_react.default.createElement(BaseForm, _extends({}, props, {
    effect: formEffect,
    fields: fields,
    render: render,
    option: option,
    component: component,
    children: children
  })));
};

exports.Form = Form;

var omitNull = value => {
  if (_lodash.default.isPlainObject(value)) {
    Object.keys(value).forEach(k => {
      var ret = omitNull(value[k]);

      if (ret == null) {
        delete value[k];
      } else {
        value[k] = ret;
      }
    });
  } else if (_lodash.default.isArray(value)) {
    value.forEach(omitNull);
  }

  return value;
};

var SchemaForm = props => {
  var {
    schema
  } = props;

  var formRef = _react.default.useRef();

  if (!_lodash.default.isPlainObject(schema)) {
    return null;
  }

  var {
    fields
  } = (0, _schema.convert)(schema);

  var validate = vs => {
    var values = _lodash.default.cloneDeep(vs);

    var ajValidate = ajv.compile(schema);
    var valid = ajValidate(omitNull(values));

    if (!valid) {
      var {
        i18n
      } = _xadmin.app.context;

      if (i18n && _locales.default[i18n.language]) {
        _locales.default[i18n.language](ajValidate.errors);
      } else {
        _locales.default['en'](ajValidate.errors);
      }
    }

    var errors = props.validate && _lodash.default.isFunction(props.validate) ? props.validate(values) : {};
    errors = valid ? errors : ajValidate.errors.reduce((prev, err) => {
      var p = err.dataPath;

      if (err.keyword == 'required' && err.params.missingProperty) {
        if (err.params.missingProperty.indexOf('-') >= 0) {
          p += "['".concat(err.params.missingProperty, "']");
        } else {
          p += '.' + err.params.missingProperty;
        }
      }

      if (p.startsWith('.')) p = p.substring(1);

      _lodash.default.set(prev, p, err.message);

      return prev;
    }, errors);
    return errors;
  };

  return /*#__PURE__*/_react.default.createElement(Form, _extends({}, props, {
    validate: validate,
    fields: fields,
    effect: schema.formEffect,
    formRef: formRef
  }));
};

exports.SchemaForm = SchemaForm;

var useForm = select => {
  var form = (0, _reactFinalForm.useForm)();
  var formState = form.getState();

  var [values, setValues] = _react.default.useState(select ? select(formState) : {});

  form.useField = function (name, subscriber) {
    var effects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['value'];
    form.registerField(name, subscriber, effects && effects.reduce((prev, ef) => {
      prev[ef] = true;
      return prev;
    }, {}));
  };

  form.setFieldData = form.mutators.setFieldData;

  form.useEffect = function (subscriber) {
    var effects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['values'];
    form.subscribe(subscriber, effects && effects.reduce((prev, ef) => {
      prev[ef] = true;
      return prev;
    }, {}));
  };

  _react.default.useEffect(() => {
    if (select) {
      form.subscribe(state => {
        setValues(select(state));
      }, {
        values: true
      });
    }
  }, []);

  return _objectSpread(_objectSpread({}, values), {}, {
    form,
    getFormState: form.getState,
    formState
  });
};

exports.useForm = useForm;