function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import _ from 'lodash';
import { Navigate } from 'react-router-dom';
import app, { use } from 'xadmin';

var IsAuthenticated = (_ref) => {
  var {
    children
  } = _ref;
  var location = use('location');
  var {
    user
  } = use('auth.user');

  if (!user) {
    return /*#__PURE__*/React.createElement(Navigate, {
      to: "/login",
      state: {
        from: location
      },
      replace: true
    });
  }

  return children;
};

var ShowAuthenticated = (_ref2) => {
  var {
    children
  } = _ref2;
  var {
    user
  } = use('auth.user');

  if (!user) {
    return null;
  }

  return children;
};

var IsSuperUser = (_ref3) => {
  var {
    children
  } = _ref3;
  var {
    user
  } = use('auth.user');

  if (user !== null && user.isSuper) {
    return children;
  } else {
    app.go('/app');
    return null;
  }
};

var HasPermission = (_ref4) => {
  var {
    permission,
    FailureComponent = 'NoPermission',
    children
  } = _ref4,
      props = _objectWithoutProperties(_ref4, ["permission", "FailureComponent", "children"]);

  var {
    user
  } = use('auth.user');

  var checkPermission = user => {
    if (user && user.isSuper) {
      return true;
    }

    if (user && user.permissions) {
      if (_.isArray(permission)) {
        return !_.some(permission, p => user.permissions.indexOf(p) == -1);
      } else if (_.isFunction(permission)) {
        return permission(user);
      } else {
        return user.permissions.indexOf(permission) > -1;
      }
    } else {
      return false;
    }
  };

  if (checkPermission(user)) {
    return Object.keys(props).length > 0 ? /*#__PURE__*/React.cloneElement(children, props) : children;
  } else {
    if ( /*#__PURE__*/React.isValidElement(FailureComponent)) {
      return FailureComponent;
    } else if (_.isFunction(FailureComponent)) {
      return /*#__PURE__*/React.createElement(FailureComponent, null);
    } else {
      return FailureComponent;
    }
  }
};

var perm = function perm(permission, component) {
  var failureComponent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var {
    store
  } = app.context;
  return (user => {
    if (user && user.isSuper) {
      return true;
    }

    if (user && user.permissions) {
      if (_.isArray(permission)) {
        return !_.some(permission, p => user.permissions.indexOf(p) == -1);
      } else if (_.isFunction(permission)) {
        return permission(user);
      } else {
        return user.permissions.indexOf(permission) > -1;
      }
    } else {
      return false;
    }
  })(store.getState().user) ? component : failureComponent;
};

export { IsAuthenticated, ShowAuthenticated, IsSuperUser, HasPermission, perm };