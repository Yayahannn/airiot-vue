function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import _ from 'lodash';
import React from 'react';
import localforage from 'localforage';
import Cookies from 'js-cookie';
import { app, use, api } from 'xadmin';
import { _t } from 'xadmin-i18n';
import { UserContext } from './context';
export default {
  'auth.user': () => React.useContext(UserContext),
  'auth.context': () => {
    var {
      auth
    } = app.load_dict('config');
    var [init, setInit] = React.useState(false);
    var [user, setUserInfo] = React.useState(null);

    var setUser = user => {
      app.context.user = user;
      setUserInfo(user);
    };

    React.useEffect(() => {
      var loadUser = /*#__PURE__*/function () {
        var _ref = _asyncToGenerator(function* () {
          var user = null;

          if (auth.persist_type == 'localforage') {
            try {
              var value = yield localforage.getItem('user');

              if (value) {
                user = JSON.parse(value);
              }
            } catch (error) {
              yield localforage.removeItem('user');
            }
          } else if (auth.persist_type == 'session-storage') {
            var _value = sessionStorage.getItem('user');

            if (_value) {
              user = JSON.parse(_value);
            }
          } else if (auth.persist_type == 'cookie') {
            user = Cookies.getJSON('user');
          }

          if (!_.isEmpty(user)) {
            setUser(user);

            try {
              var userInfo = yield api({
                name: 'auth'
              }).get('user');

              if (!_.isEmpty(userInfo)) {
                setUser(_objectSpread(_objectSpread({}, user), userInfo));
              }
            } catch (err) {}
          }

          setTimeout(() => setInit(true), 0);
        });

        return function loadUser() {
          return _ref.apply(this, arguments);
        };
      }();

      loadUser();
    }, []);
    React.useEffect(() => {
      var saveUser = /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator(function* () {
          if (auth.persist_type == 'localforage') {
            if (user) {
              yield localforage.setItem('user', JSON.stringify(user));
            } else {
              yield localforage.removeItem('user');
            }
          } else if (auth.persist_type == 'session-storage') {
            if (user) {
              sessionStorage.setItem('user', JSON.stringify(user));
            } else {
              sessionStorage.removeItem('user');
            }
          } else if (auth.persist_type == 'cookie') {
            if (user) {
              Cookies.set('user', user, auth.userinfo_timeout ? {
                expires: auth.userinfo_timeout
              } : {});
            } else {
              Cookies.remove('user');
            }
          }
        });

        return function saveUser() {
          return _ref2.apply(this, arguments);
        };
      }();

      saveUser();
    }, [user]);
    return {
      show: init,
      user,
      setUser
    };
  },
  'auth.login': () => {
    var location = use('location');
    var query = use('query');
    var navigate = use('navigate');
    var message = use('message');
    var {
      setUser
    } = use('auth.user');

    var onSignIn = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator(function* (item) {
        try {
          var _location$state, _location$state$from;

          var user = yield api({
            name: 'auth/login'
          }).save(item);
          setUser(_.omit(user, 'password'));

          if (user.name == undefined && user.username == undefined) {
            try {
              var userInfo = yield api({
                name: 'auth'
              }).get('user');
              setUser(_objectSpread(_objectSpread({}, user), userInfo));
            } catch (err) {}
          }

          navigate(((_location$state = location.state) === null || _location$state === void 0 ? void 0 : (_location$state$from = _location$state.from) === null || _location$state$from === void 0 ? void 0 : _location$state$from.pathname) || '/app/', {
            replace: true
          });
        } catch (error) {
          console.log(error);
          throw error.json && error.json.non_field_errors == undefined ? error.json : {
            password: _t('Incorrect username or password')
          };
        }
      });

      return function onSignIn(_x) {
        return _ref3.apply(this, arguments);
      };
    }();

    React.useEffect(() => {
      if (query.verifyEmail == 'success') {
        message && message.success(_t('Verify email success, please login'));
      }
    }, []);
    return {
      onSignIn
    };
  },
  'auth.logout': () => {
    var {
      setUser
    } = use('auth.user');
    var message = use('message');
    var onLogout = React.useCallback( /*#__PURE__*/_asyncToGenerator(function* () {
      try {
        yield api({
          name: 'auth/logout'
        }).save({});
        message && message.success(_t('Successfully logged out'));
        setUser(null);
      } catch (err) {
        app.error(err);
      }
    }), []);
    return {
      onLogout
    };
  },
  'auth.sign_up': () => {
    var navigate = use('navigate');
    var message = use('message');

    var onSuccess = resp => {
      if (resp.key) {
        api({
          name: 'auth/registration/verify-email'
        }).save(_objectSpread({
          language: 'zh_CN'
        }, resp)).then(() => {
          message && message.success(_t('Send verify code to your email, please check'));
        });
      } else if (resp.detail) {
        message && message.success(resp.detail);
      }

      navigate('/login');
    };

    return {
      onSuccess
    };
  },
  'auth.forget_password': () => {
    var navigate = use('navigate');

    var onSuccess = user => {
      navigate('/login');
    };

    return {
      onSuccess
    };
  },
  'auth.change_password': () => {
    var navigate = use('navigate');
    var message = use('message');

    var onChange = /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator(function* (item) {
        try {
          yield api({
            name: 'user/password'
          }).save(item);
          message && message.success(_t('Change password success'));
          navigate('/app/');
        } catch (error) {
          throw new Error({
            old_password: _t('Incorrect old password')
          });
        }
      });

      return function onChange(_x2) {
        return _ref5.apply(this, arguments);
      };
    }();

    return {
      onChange
    };
  },
  'auth.reset_password': () => {
    var navigate = use('navigate');

    var onSuccess = user => {
      navigate('/login');
    };

    return {
      onSuccess
    };
  }
};