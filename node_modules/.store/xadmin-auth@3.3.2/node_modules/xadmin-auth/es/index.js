function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import hooks from './hooks';
import { C } from 'xadmin-ui';
import SignInForm from './components/SignIn';
import SignUpForm from './components/SignUp';
import ForgetPasswordForm from './components/ForgetPassword';
import ResetPasswordForm from './components/ResetPassword';
import ChangePasswordForm from './components/ChangePassword';
import models from './models';
import { UserRoot } from './context';
import { IsAuthenticated, ShowAuthenticated, IsSuperUser, HasPermission, perm } from './wrap';
export default {
  name: 'xadmin.auth',
  config: {
    auth: {
      can_reset_password: true,
      can_change_password: true,
      can_signup: true,
      can_signin: true,
      persist_type: 'localforage'
    }
  },
  blocks: {
    'top.right': props => /*#__PURE__*/React.createElement(C, _extends({
      is: "Auth.UserMenu",
      key: "auth.user"
    }, props))
  },
  components: {
    App: props => /*#__PURE__*/React.createElement(IsAuthenticated, null, /*#__PURE__*/React.createElement(C, _extends({
      is: "BaseApp"
    }, props)))
  },
  root_component: app => children => /*#__PURE__*/React.createElement(UserRoot, null, children),
  routers: app => {
    var {
      auth
    } = app.load_dict('config');
    var routes = [];

    if (auth.can_signin) {
      routes.push({
        path: 'login',
        component: SignInForm
      });
    }

    if (auth.can_signup) {
      routes.push({
        path: 'signup',
        component: SignUpForm
      });
    }

    if (auth.can_reset_password) {
      routes.push({
        path: 'forget_password',
        component: ForgetPasswordForm
      });
      routes.push({
        path: 'password_reset_confirm',
        component: ResetPasswordForm
      });
    }

    return {
      '/': routes,
      '/app/': {
        path: 'change_password',
        component: ChangePasswordForm
      }
    };
  },
  schema_converter: (f, schema) => {
    if (schema.type === 'string' && schema.fieldType == 'captcha') {
      f.type = 'captcha';
    }

    return f;
  },
  models,
  hooks
};
export { IsAuthenticated, ShowAuthenticated, IsSuperUser, HasPermission, perm };