function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { all, fork, put, call, cancelled, takeEvery } from 'redux-saga/effects';
import { app, api } from 'xadmin';

function* handle_get_userinfo(_ref) {
  var {
    type
  } = _ref;

  try {
    var user = yield api({
      name: 'auth'
    }).get('user');
    yield put({
      type,
      payload: user,
      success: true
    });
  } catch (err) {
    app.error(err);
  }
}

function* handle_user_signin(_ref2) {
  var {
    payload: user
  } = _ref2;

  if (user.name == undefined && user.username == undefined) {
    yield put({
      type: '@@xadmin/GET_USER_INFO'
    });
  }
}

function* handle_user_signout() {
  var {
    _t
  } = app.context;

  try {
    yield api({
      name: 'auth/logout'
    }).save({});
    yield put({
      type: '@@xadmin/AUTH_SIGN_OUT_FINISH'
    });
    yield put({
      type: '@@xadmin/ADD_NOTICE',
      payload: {
        type: 'success',
        headline: 'Success',
        message: _t('Successfully logged out')
      }
    });
  } catch (err) {
    app.error(err);
  }
}

function* handle_verify_email(_ref3) {
  var {
    payload
  } = _ref3;
  var {
    _t
  } = app.context;

  try {
    yield api({
      name: 'auth/registration/verify-email'
    }).save(_objectSpread({
      language: 'zh_CN'
    }, payload));
    yield put({
      type: '@@xadmin/ADD_NOTICE',
      payload: {
        type: 'success',
        headline: 'Success',
        message: _t('Send verify code to your email, please check')
      }
    });
  } catch (err) {
    app.error(err);
  }
}

export default function* () {
  yield all([takeEvery(action => action.type == '@@xadmin/GET_USER_INFO' && action.success != true, handle_get_userinfo), takeEvery(action => action.type == '@@xadmin/AUTH_VERIFY_EMAIL', handle_verify_email), takeEvery(action => action.type == '@@xadmin/AUTH_SIGN_IN', handle_user_signin), takeEvery(action => action.type == '@@xadmin/AUTH_SIGN_OUT', handle_user_signout)]);
}