"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.perm = exports.HasPermission = exports.IsSuperUser = exports.ShowAuthenticated = exports.IsAuthenticated = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash"));

var _reactRouterDom = require("react-router-dom");

var _xadmin = _interopRequireWildcard(require("xadmin"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var IsAuthenticated = (_ref) => {
  var {
    children
  } = _ref;
  var location = (0, _xadmin.use)('location');
  var {
    user
  } = (0, _xadmin.use)('auth.user');

  if (!user) {
    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Navigate, {
      to: "/login",
      state: {
        from: location
      },
      replace: true
    });
  }

  return children;
};

exports.IsAuthenticated = IsAuthenticated;

var ShowAuthenticated = (_ref2) => {
  var {
    children
  } = _ref2;
  var {
    user
  } = (0, _xadmin.use)('auth.user');

  if (!user) {
    return null;
  }

  return children;
};

exports.ShowAuthenticated = ShowAuthenticated;

var IsSuperUser = (_ref3) => {
  var {
    children
  } = _ref3;
  var {
    user
  } = (0, _xadmin.use)('auth.user');

  if (user !== null && user.isSuper) {
    return children;
  } else {
    _xadmin.default.go('/app');

    return null;
  }
};

exports.IsSuperUser = IsSuperUser;

var HasPermission = (_ref4) => {
  var {
    permission,
    FailureComponent = 'NoPermission',
    children
  } = _ref4,
      props = _objectWithoutProperties(_ref4, ["permission", "FailureComponent", "children"]);

  var {
    user
  } = (0, _xadmin.use)('auth.user');

  var checkPermission = user => {
    if (user && user.isSuper) {
      return true;
    }

    if (user && user.permissions) {
      if (_lodash.default.isArray(permission)) {
        return !_lodash.default.some(permission, p => user.permissions.indexOf(p) == -1);
      } else if (_lodash.default.isFunction(permission)) {
        return permission(user);
      } else {
        return user.permissions.indexOf(permission) > -1;
      }
    } else {
      return false;
    }
  };

  if (checkPermission(user)) {
    return Object.keys(props).length > 0 ? /*#__PURE__*/_react.default.cloneElement(children, props) : children;
  } else {
    if ( /*#__PURE__*/_react.default.isValidElement(FailureComponent)) {
      return FailureComponent;
    } else if (_lodash.default.isFunction(FailureComponent)) {
      return /*#__PURE__*/_react.default.createElement(FailureComponent, null);
    } else {
      return FailureComponent;
    }
  }
};

exports.HasPermission = HasPermission;

var perm = function perm(permission, component) {
  var failureComponent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var {
    store
  } = _xadmin.default.context;
  return (user => {
    if (user && user.isSuper) {
      return true;
    }

    if (user && user.permissions) {
      if (_lodash.default.isArray(permission)) {
        return !_lodash.default.some(permission, p => user.permissions.indexOf(p) == -1);
      } else if (_lodash.default.isFunction(permission)) {
        return permission(user);
      } else {
        return user.permissions.indexOf(permission) > -1;
      }
    } else {
      return false;
    }
  })(store.getState().user) ? component : failureComponent;
};

exports.perm = perm;