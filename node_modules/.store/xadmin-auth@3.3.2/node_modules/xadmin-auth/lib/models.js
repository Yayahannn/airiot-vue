"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserSignUp = exports.UserChangePassword = exports.UserResetPassword = exports.UserForgetPassword = exports.UserSignOut = exports.UserSignIn = exports.default = void 0;

var _xadmin = require("xadmin");

var _xadminI18n = require("xadmin-i18n");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Forms
var UserSignIn = () => ({
  type: 'object',
  name: 'user_sign_in',
  resource: 'auth/login',
  title: (0, _xadminI18n._t)('Sign In'),
  properties: _objectSpread({
    username: {
      title: (0, _xadminI18n._t)('Username'),
      type: 'string'
    },
    password: {
      title: (0, _xadminI18n._t)('Password'),
      type: 'string'
    }
  }, (0, _xadmin.config)('auth.login.captcha') ? {
    code: {
      title: (0, _xadminI18n._t)('Captcha Code'),
      type: 'string',
      fieldType: 'captcha'
    }
  } : {}),
  required: ['username', 'password', ...((0, _xadmin.config)('auth.login.captcha') ? ['code'] : [])],
  form: ['username', {
    key: 'password',
    attrs: {
      type: 'password'
    }
  }, ...((0, _xadmin.config)('auth.login.captcha') ? [{
    key: 'code',
    captcha_url: '/' + (0, _xadmin.config)('auth.login.captcha')
  }] : [])]
});

exports.UserSignIn = UserSignIn;

var UserSignOut = () => ({
  type: 'object',
  name: 'user_sign_out',
  resource: 'auth/logout'
});

exports.UserSignOut = UserSignOut;

var UserForgetPassword = () => ({
  type: 'object',
  name: 'user_forgot_password',
  resource: 'auth/password/reset',
  title: (0, _xadminI18n._t)('Forgot password'),
  properties: {
    email: {
      title: (0, _xadminI18n._t)('Register Email'),
      type: 'string',
      format: 'email'
    }
  },
  required: ['email'],
  form: ['email']
});

exports.UserForgetPassword = UserForgetPassword;

var UserResetPassword = () => ({
  type: 'object',
  name: 'user_reset_password',
  resource: 'auth/password/reset/confirm',
  title: (0, _xadminI18n._t)('Reset Password'),
  properties: {
    new_password1: {
      title: (0, _xadminI18n._t)('New Password'),
      type: 'string',
      maxLength: 12,
      minLength: 6
    },
    new_password2: {
      title: (0, _xadminI18n._t)('Repeat Password'),
      type: 'string',
      maxLength: 12,
      minLength: 6,
      constant: {
        $data: '1/new_password1',
        constantName: (0, _xadminI18n._t)('New Password')
      }
    },
    token: {
      type: 'string'
    },
    uid: {
      type: 'string'
    }
  },
  form: [{
    key: 'new_password1',
    attrs: {
      type: 'password'
    }
  }, {
    key: 'new_password2',
    attrs: {
      type: 'password'
    }
  }]
});

exports.UserResetPassword = UserResetPassword;

var UserChangePassword = () => ({
  type: 'object',
  name: 'user_change_password',
  resource: 'user/password',
  title: (0, _xadminI18n._t)('Change Password'),
  properties: {
    old_password: {
      title: (0, _xadminI18n._t)('Old Password'),
      type: 'string',
      maxLength: 12,
      minLength: 6
    },
    new_password: {
      title: (0, _xadminI18n._t)('New Password'),
      type: 'string',
      maxLength: 12,
      minLength: 6
    },
    new_password2: {
      title: (0, _xadminI18n._t)('Repeat Password'),
      type: 'string',
      maxLength: 12,
      minLength: 6,
      const: {
        $data: '1/new_password',
        constantName: (0, _xadminI18n._t)('New Password')
      }
    }
  },
  required: ['old_password', 'new_password', 'new_password2'],
  form: [{
    key: 'old_password',
    attrs: {
      type: 'password'
    }
  }, {
    key: 'new_password',
    attrs: {
      type: 'password'
    }
  }, {
    key: 'new_password2',
    attrs: {
      type: 'password'
    }
  }]
});

exports.UserChangePassword = UserChangePassword;

var UserSignUp = () => ({
  type: 'object',
  name: 'user_sign_up',
  resource: 'auth/registration',
  title: (0, _xadminI18n._t)('Sign Up'),
  properties: _objectSpread({
    username: {
      title: (0, _xadminI18n._t)('User Name'),
      type: 'string'
    },
    email: {
      title: (0, _xadminI18n._t)('Email'),
      type: 'string'
    },
    password1: {
      title: (0, _xadminI18n._t)('Password'),
      type: 'string',
      maxLength: 12,
      minLength: 6
    },
    password2: {
      title: (0, _xadminI18n._t)('Repeat Password'),
      type: 'string',
      maxLength: 12,
      minLength: 6,
      constant: {
        $data: '1/password1',
        constantName: (0, _xadminI18n._t)('Password')
      }
    }
  }, (0, _xadmin.config)('auth.registration.captcha') ? {
    code: {
      title: (0, _xadminI18n._t)('Captcha Code'),
      type: 'string',
      fieldType: 'captcha'
    }
  } : {}),
  permission: {
    add: true
  },
  required: ['username', 'email', 'password1', 'password2', ...((0, _xadmin.config)('auth.registration.captcha') ? ['code'] : [])],
  form: ['username', 'email', {
    key: 'password1',
    attrs: {
      type: 'password'
    }
  }, {
    key: 'password2',
    attrs: {
      type: 'password'
    }
  }, ...((0, _xadmin.config)('auth.registration.captcha') ? [{
    key: 'code',
    captcha_url: '/' + (0, _xadmin.config)('auth.registration.captcha')
  }] : [])]
}); // Models


exports.UserSignUp = UserSignUp;

var Permission = () => ({
  type: 'object',
  name: 'auth_permission',
  resource: 'auth/permission',
  title: (0, _xadminI18n._t)('Permission'),
  icon: 'key',
  properties: {
    name: {
      title: (0, _xadminI18n._t)('Name'),
      type: 'string'
    },
    description: {
      title: (0, _xadminI18n._t)('Description'),
      type: 'string'
    }
  },
  searchFields: ['name'],
  ui: {
    showMenu: false
  }
});

var Role = () => {
  return {
    type: 'object',
    name: 'auth_role',
    resource: 'auth/role',
    title: (0, _xadminI18n._t)('Role'),
    icon: 'group',
    properties: {
      name: {
        title: (0, _xadminI18n._t)('Name'),
        type: 'string'
      },
      permissions: {
        title: (0, _xadminI18n._t)('Permission'),
        type: 'array',
        items: Permission()
      }
    },
    searchFields: ['name'],
    ui: {
      showMenu: false
    }
  };
};

var User = () => {
  return {
    type: 'object',
    name: 'auth_user',
    resource: 'user',
    title: (0, _xadminI18n._t)('User'),
    icon: 'user',
    properties: {
      username: {
        title: (0, _xadminI18n._t)('Name'),
        type: 'string'
      },
      email: {
        title: (0, _xadminI18n._t)('Email'),
        type: 'string'
      },
      emailVerified: {
        type: 'boolean',
        title: (0, _xadminI18n._t)('Email Verified')
      },
      is_superuser: {
        type: 'boolean',
        title: (0, _xadminI18n._t)('Is SuperUser')
      },
      date_joined: {
        type: 'string',
        format: 'date',
        title: (0, _xadminI18n._t)('Date Joined')
      },
      permissions: {
        title: (0, _xadminI18n._t)('Permission'),
        type: 'array',
        items: Permission()
      },
      roles: {
        title: (0, _xadminI18n._t)('Role'),
        type: 'array',
        items: Role()
      }
    },
    searchFields: ['username', 'email'],
    filters: {
      nav: ['emailVerified', 'is_superuser', 'date_joined']
    },
    listFields: ['username', 'email', 'is_superuser', 'date_joined'],
    form: ['username', 'email', 'is_superuser'],
    permission: {
      view: true,
      add: true,
      edit: true,
      delete: true
    },
    ui: {
      show_menu: false
    }
  };
};

var _default = () => ({
  auth_user: User(),
  auth_permission: Permission(),
  auth_role: Role()
});

exports.default = _default;