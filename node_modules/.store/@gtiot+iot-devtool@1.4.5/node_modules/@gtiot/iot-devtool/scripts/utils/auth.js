const chalk = require("chalk");

const inquirer = require("inquirer");
const path = require("path");
const pacote = require('pacote');

const fetch = require("node-fetch");
const FormData = require("form-data");
const fs = require("fs");
const stream = require('stream');
 
const paths = require("../../config/paths");
const { resolve } = require("path");
const { rejects } = require("assert");
const package = require(paths.appPackageJson);

const envs = process.env;
const args = process.argv;
let packageName = package.name;

const getOpt = (name, envName) => {
  let value
  const hostArgs = args.filter(arg => arg.startsWith(`--${name}=`))
  if(hostArgs.length != 0) {
    value = hostArgs[0].replace(`--${name}=`, '')
  } else if(envs[envName]) {
    value = envs[envName]
  }

  if(value && value.endsWith('/')) {
    value = value.substring(0, value.length - 1)
  }
  
  return value
}

const getToken = new Promise((resolve, reject) => {
  const questions = [];
  const forceQuestion = args.filter(arg => arg.startsWith("-f")).length != 0

  const opts = {
    'host': getOpt('host', 'IOT_URL'),
    'username': getOpt('username', 'IOT_USER'),
    'password': getOpt('password', 'IOT_PASSWORD')
  }
  
  if (forceQuestion || !opts.host) {
    questions.push({ name: "host", message: "[iot] Host:" });
  }
  if (forceQuestion || !opts.username) {
    questions.push({ name: "username", message: "[iot] 管理员用户:" });
  }
  if (forceQuestion || !opts.password) {
    questions.push({ name: "password", message: "[iot] 管理员密码:", type: "password" });
  }

  inquirer
    .prompt(questions)
    .then((answers) => {
      let host = answers.host || opts.host;
      let username = answers.username || opts.username;
      let password = answers.password || opts.password;
  
      host = host.endsWith("/") ? host : host + "/";
      
      // get use token from environment
      fetch(host + "rest/core/auth/login", {
        method: "POST",
        body: JSON.stringify({ username, password }),
        headers: { "Content-Type": "application/json", "Request-Type": "service" },
      })
        .then((res) => {
          if (res.status != 200) {
            throw new Error(res.text());
          } else {
            return res.json();
          }
        })
        .then((json) => {
          if (!json.token) {
            throw new Error(json);
          }
          const token = json.token;
          resolve(host, token);
        })
        .catch((err) =>
          console.error(chalk.red("[iot:install] 用户验证失败" + "\n" + err.toString()))
        );
    })
    .catch((err) =>
      console.error(chalk.red("[iot:install] 用户验证失败" + "\n" + err.toString()))
    );  
})

module.exports = {
  getToken
}