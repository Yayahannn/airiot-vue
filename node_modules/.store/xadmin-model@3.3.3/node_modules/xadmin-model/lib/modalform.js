"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ItemModalForm = exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _xadminForm = require("xadmin-form");

var _xadminUi = require("xadmin-ui");

var _xadminI18n = require("xadmin-i18n");

var _xadmin = require("xadmin");

var _recoil = require("recoil");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var ItemModalForm = () => {
  var {
    model
  } = (0, _xadmin.use)('model');
  var message = (0, _xadmin.use)('message');
  var {
    canAdd,
    canEdit
  } = (0, _xadmin.use)('model.permission');
  var {
    saveItem
  } = (0, _xadmin.use)('model.save');
  var {
    getItems
  } = (0, _xadmin.use)('model.getItems');
  var [modalItemId, setModalItemId] = (0, _xadmin.use)('model.state', 'modalItem');
  var {
    data,
    loading
  } = (0, _xadmin.use)('model.item', {
    id: modalItemId
  });

  var hideLoading = _react.default.useRef();

  var show = !_.isNil(modalItemId);

  var hideModal = () => setModalItemId(null);

  var onSubmitSuccess = item => {
    hideModal();
    getItems();
  };

  _react.default.useEffect(() => {
    if (message !== null && message !== void 0 && message.loading) {
      if (loading) {
        hideLoading.current = message === null || message === void 0 ? void 0 : message.loading((0, _xadminI18n._t)('Loading data'));
      } else if (hideLoading.current) {
        hideLoading.current();
        hideLoading.current = null;
      }
    }
  }, [loading]);

  var hasPermission = (data === null || data === void 0 ? void 0 : data.id) == undefined && canAdd || (data === null || data === void 0 ? void 0 : data.id) != undefined && canEdit;
  return hasPermission && show && !loading ? /*#__PURE__*/_react.default.createElement(_xadminForm.SchemaForm, _extends({
    formKey: "model.modalform.".concat(model.key, ".").concat(modalItemId),
    schema: model,
    initialValues: data,
    onSubmit: saveItem,
    onSubmitSuccess: onSubmitSuccess
  }, model.formProps), props => /*#__PURE__*/_react.default.createElement(_xadminUi.C, _extends({
    is: "Form.ModalLayout"
  }, props, {
    title: model.title,
    show: show,
    onClose: hideModal
  }))) : null;
};

exports.ItemModalForm = ItemModalForm;
var _default = {
  name: 'xadmin.model.modalform',
  blocks: {
    'model.list.navbtn': () => /*#__PURE__*/_react.default.createElement(ItemModalForm, null)
  },
  modelAtoms: [k => ({
    modalItem: (0, _recoil.atom)({
      key: k('modalItem'),
      default: null
    })
  })],
  hooks: {
    'model.event': () => {
      var setModalItemId = (0, _xadmin.use)('model.setter', 'modalItem');
      return {
        onAdd: () => setModalItemId(''),
        onSaved: () => setModalItemId(null),
        onEdit: id => setModalItemId(id)
      };
    }
  }
};
exports.default = _default;