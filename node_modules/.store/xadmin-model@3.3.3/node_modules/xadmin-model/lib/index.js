"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Model", {
  enumerable: true,
  get: function get() {
    return _base.Model;
  }
});
Object.defineProperty(exports, "ModelContext", {
  enumerable: true,
  get: function get() {
    return _base.ModelContext;
  }
});
Object.defineProperty(exports, "ModelBlock", {
  enumerable: true,
  get: function get() {
    return _base.ModelBlock;
  }
});
Object.defineProperty(exports, "ModelRoutes", {
  enumerable: true,
  get: function get() {
    return _base.ModelRoutes;
  }
});
exports.utils = exports.default = exports.apps = void 0;

var _react = _interopRequireDefault(require("react"));

var _xadminUi = require("xadmin-ui");

var _base = require("./base");

var _hooks = _interopRequireDefault(require("./hooks"));

var _render = _interopRequireDefault(require("./render"));

var _relate = _interopRequireDefault(require("./relate"));

var _filter = _interopRequireDefault(require("./filter"));

var _actions = _interopRequireDefault(require("./actions"));

var _search = _interopRequireDefault(require("./search"));

var _modalform = _interopRequireDefault(require("./modalform"));

var _reldetail = _interopRequireDefault(require("./reldetail"));

var utils = _interopRequireWildcard(require("./utils"));

exports.utils = utils;

var _lodash = _interopRequireDefault(require("lodash"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var app = {
  name: 'xadmin.model',
  items: {
    models: {
      type: 'map'
    },
    fieldRenders: {
      type: 'array'
    },
    modelActions: {
      type: 'map'
    },
    modelAtoms: {
      type: 'array'
    }
  },
  components: {
    'Model.Routes': _base.ModelRoutes
  },
  blocks: app => {
    var models = app.get('models');
    return {
      'main.menu': () => {
        return Object.keys(models).map(name => {
          var _model$permission, _model$ui, _model$ui2;

          var model = models[name];

          if ((_model$permission = model.permission) !== null && _model$permission !== void 0 && _model$permission.view && (_model$ui = model.ui) !== null && _model$ui !== void 0 && _model$ui.showMenu && (_model$ui2 = model.ui) !== null && _model$ui2 !== void 0 && _model$ui2.menuPath) {
            return /*#__PURE__*/_react.default.createElement(_xadminUi.Menu.Item, {
              itemKey: "main-menu-item-model-".concat(name),
              onItemClick: () => app.go(model.ui.menuPath),
              icon: /*#__PURE__*/_react.default.createElement(_xadminUi.Icon, {
                name: model.icon || name
              })
            }, model.title);
          }
        }).filter(item => item !== undefined);
      }
    };
  },
  routers: app => {
    var models = app.get('models');
    var {
      _t
    } = app.context;
    var routes = {
      '/app/': [{
        path: 'model'
      }]
    };
    var autoModelRoutes = app.config('autoModelRoutes');
    var defaultRootRoute = '/app/model';

    if (autoModelRoutes === false) {
      return routes;
    } else if (_lodash.default.isString(autoModelRoutes)) {
      defaultRootRoute = autoModelRoutes;
    }

    var _loop = function _loop(name) {
      var model = models[name];
      var modelName = model.title || model.name;
      var rs = _lodash.default.isArray(model.route) ? model.route : [model.route || {
        parentPath: defaultRootRoute,
        path: name
      }];
      rs.forEach(r => {
        var parent = r.parentPath || '/';
        var path = _lodash.default.isString(r) ? r : r.path;

        if (!routes[parent]) {
          routes[parent] = [];
        }

        routes[parent].push({
          path: "".concat(path, "/*"),
          breadcrumbName: _t('{{name}} List', {
            name: modelName
          }),
          element: /*#__PURE__*/_react.default.createElement(_base.Model, {
            key: "model.".concat(parent, ".").concat(path),
            name: name
          }, /*#__PURE__*/_react.default.createElement(_base.ModelRoutes, null))
        });
      });
    };

    for (var name in models) {
      _loop(name);
    }

    return routes;
  },
  hooks: _hooks.default,
  fieldRenders: _render.default,
  modelActions: {
    edit: {
      default: true,
      component: _xadminUi.C.lazy('Model.ActionEdit')
    },
    delete: {
      default: true,
      component: _xadminUi.C.lazy('Model.ActionDelete')
    }
  }
};
var apps = {
  relate: _relate.default,
  filter: _filter.default,
  actions: _actions.default,
  search: _search.default,
  modalform: _modalform.default,
  reldetail: _reldetail.default
};
exports.apps = apps;
var _default = app;
exports.default = _default;