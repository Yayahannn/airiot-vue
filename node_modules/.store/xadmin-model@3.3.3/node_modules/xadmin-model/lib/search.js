"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash"));

var _xadminUi = require("xadmin-ui");

var _xadmin = require("xadmin");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _default = {
  name: 'xadmin.model.search',
  blocks: {
    'model.list.nav': props => /*#__PURE__*/_react.default.createElement(_xadminUi.C, _extends({
      is: "Model.SearchBar",
      key: "searchBar"
    }, props))
  },
  hooks: {
    'model.searchbar': () => {
      var [searchValue, setSearch] = _react.default.useState(null);

      var setSearchFilter = (0, _xadmin.use)('model.setter', 'where', 'searchbar');
      var {
        model
      } = (0, _xadmin.use)('model');
      var searchFields = model.searchFields;
      var searchTitles = model.searchFields && model.searchFields.map(field => model.properties[field].title || field);

      var onSearch = _react.default.useCallback(search => {
        if (search) {
          var searchs = model.searchFields.map(field => {
            return {
              [field]: {
                like: search
              }
            };
          });

          if (searchs.length > 1) {
            setSearchFilter({
              or: searchs
            });
          } else if (searchs.length > 0) {
            setSearchFilter(searchs[0]);
          }
        } else {
          setSearchFilter(null);
        }

        setSearch(search);
      }, [model.searchFields, setSearch, setSearchFilter]);

      return {
        searchValue,
        searchFields,
        searchTitles,
        onSearch
      };
    }
  }
};
exports.default = _default;