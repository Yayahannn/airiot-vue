"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RelateAction = exports.Checkboxes = exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash"));

var _xadmin = _interopRequireWildcard(require("xadmin"));

var _xadminI18n = require("xadmin-i18n");

var _xadminUi = require("xadmin-ui");

var _base = require("./base");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Checkboxes = props => {
  var {
    input: {
      value,
      onChange
    },
    field
  } = props;
  var {
    loading,
    options
  } = (0, _xadmin.use)('model.relate.select', {
    field
  });

  var onCheckChange = _react.default.useCallback((checked, option) => {
    if (checked) {
      onChange([...value, option]);
    } else {
      onChange(value.filter(item => item.id != option.id));
    }
  }, [value, onChange]);

  var renderOptions = () => {
    var checkedIds = value ? value.map(item => item.id) : [];
    return options.map((_ref) => {
      var {
        value,
        label,
        item
      } = _ref;
      var checked = checkedIds.indexOf(value) >= 0;
      return /*#__PURE__*/_react.default.createElement(_xadminUi.Check, _extends({
        onChange: () => {
          onCheckChange(!checked, item);
        },
        checked: checked
      }, field.attrs), label);
    });
  };

  return loading ? /*#__PURE__*/_react.default.createElement(_xadminUi.Loading, null) : options ? renderOptions() : /*#__PURE__*/_react.default.createElement(_xadminUi.Input.Static, null, (0, _xadminI18n._t)('Empty'));
};

exports.Checkboxes = Checkboxes;
var schema_converter = [(f, schema, options) => {
  if (schema.type == 'array' && schema.items.type == 'object' && schema.items.relateTo) {
    var models = _xadmin.default.get('models');

    var name = schema.items.relateTo;

    if (models[name]) {
      var model = models[name];
      f.type = 'multi_select';
      f.schema = model;
      f.displayField = model.displayField || 'name';
    }
  }

  return f;
}, (f, schema, options) => {
  if (schema.type == 'object' && schema.relateTo) {
    var models = _xadmin.default.get('models');

    var relateName = schema.relateTo;

    if (models[relateName]) {
      var model = models[relateName];
      f.type = 'fkselect';
      f.schema = model;
      f.displayField = model.displayField || 'name';
    }
  }

  return f;
}];
var filter_converter = [(f, schema, options) => {
  if (schema.type == 'object' && schema.relateTo) {
    var models = _xadmin.default.get('models');

    var relateName = schema.relateTo;

    if (models[relateName]) {
      var model = models[relateName];
      f.type = 'filter_relate';
      f.schema = model;
      f.displayField = model.displayField || 'name';
    }
  }

  return f;
}];

var RelateContext = /*#__PURE__*/_react.default.createContext();

var RelateContainer = (_ref2) => {
  var {
    id,
    children
  } = _ref2;
  var {
    model
  } = (0, _xadmin.use)('model');
  var {
    data,
    loading
  } = (0, _xadmin.use)('model.get', {
    id
  });
  return loading || data == undefined ? /*#__PURE__*/_react.default.createElement(_xadminUi.Loading, null) : /*#__PURE__*/_react.default.createElement(_xadminUi.C, {
    is: "Relate.Container",
    model: model,
    data: data
  }, /*#__PURE__*/_react.default.createElement(RelateContext.Provider, {
    value: {
      item: data,
      model
    }
  }, children));
};

var RelateWrap = (SubComponent, pname) => (_ref3) => {
  var {
    location
  } = _ref3,
      props = _objectWithoutProperties(_ref3, ["location"]);

  var {
    item,
    model
  } = _react.default.useContext(RelateContext);

  return /*#__PURE__*/_react.default.createElement(SubComponent, _extends({}, props, {
    location: _objectSpread(_objectSpread({}, location), {}, {
      query: _objectSpread(_objectSpread({}, location.query), {}, {
        [pname || model.name]: item.id
      })
    })
  }));
};

var routers = app => {
  var models = app.get('models');
  var {
    _t
  } = app.context;
  var names = Object.keys(models);
  var routes = {};

  var _loop = function _loop(name) {
    var model = models[name];
    var modelName = model.title || model.name; // 每个model都加上relations页面

    routes["/app/model/".concat(name, "/")] = {
      path: ':id/relations/',
      breadcrumbName: _t('{{name}} List', {
        name: modelName
      }),
      component: (_ref4) => {
        var {
          params: {
            id
          },
          children
        } = _ref4;
        return /*#__PURE__*/_react.default.createElement(RelateContainer, {
          id: id
        }, children);
      }
    }; // 循环判断每个Model的properties中的object对象

    for (var pname of Object.keys(model.properties || {})) {
      var prop = model.properties[pname];

      if (prop.type == 'object' && prop.relateTo && names.indexOf(prop.relateTo) > -1) {
        (function () {
          // 找到relate对象
          var relateName = prop.relateTo;
          var relateModel = models[relateName];
          var model_routes = [];

          if (!model.permission || model.permission.view) {
            model_routes.push({
              path: 'list',
              breadcrumbName: _t('{{name}} List', {
                name: modelName
              }),
              component: RelateWrap(model.components && (model.components['RelateListPage'] || model.components['ListPage']) || (0, _xadminUi.C)('Relate.ListPage') || (0, _xadminUi.C)('Model.ListPage'), pname)
            });
          }

          if (model.permission && model.permission.add) {
            model_routes.push({
              path: 'add',
              breadcrumbName: _t('Create {{name}}', {
                name: modelName
              }),
              component: RelateWrap(model.components && (model.components['RelateFormPage'] || model.components['FormPage']) || (0, _xadminUi.C)('Relate.FormPage') || (0, _xadminUi.C)('Model.FormPage'), pname)
            });
          }

          var key = "/app/model/".concat(relateName, "/:id/relations/");
          routes[key] = [...(routes[key] || []), {
            path: "".concat(name, "/"),
            breadcrumbName: _t('{{name}} List', {
              name: modelName
            }),
            component: (_ref5) => {
              var {
                children
              } = _ref5;
              return /*#__PURE__*/_react.default.createElement(_base.Model, {
                name: name,
                modelKey: "".concat(relateName, "_").concat(name)
              }, children);
            },
            indexRoute: {
              onEnter: (_ref6, replace) => {
                var {
                  location
                } = _ref6;
                return replace({
                  pathname: location.pathname + 'list'
                });
              }
            },
            childRoutes: model_routes
          }];
        })();
      }
    }
  };

  for (var name of names) {
    _loop(name);
  }

  return routes;
};

var RelateAction = (_ref7) => {
  var {
    item
  } = _ref7;
  var {
    model
  } = (0, _xadmin.use)('model');
  var actions = [];

  var models = _xadmin.default.get('models');

  Object.keys(models).forEach(key => {
    var m = models[key];

    for (var pname of Object.keys(m.properties || {})) {
      var prop = m.properties[pname];

      if (prop.type == 'object' && (prop.relateTo == model.key || prop.relateTo == model.name)) {
        actions.push(m);
        continue;
      }
    }
  });
  return actions.length ? /*#__PURE__*/_react.default.createElement(_xadminUi.C, {
    is: "Relate.Action",
    model: model,
    actions: actions,
    item: item
  }) : null;
};

exports.RelateAction = RelateAction;
var _default = {
  name: 'xadmin.model.relate',
  schema_converter,
  filter_converter,
  routers,
  hooks: {
    'model.relate.select': (_ref8) => {
      var {
        field
      } = _ref8;
      var {
        model
      } = (0, _xadmin.use)('model');

      var [loading, setLoadig] = _react.default.useState(false);

      var [options, setOptions] = _react.default.useState([]);

      var loadOptions = _react.default.useCallback(inputValue => {
        var displayField = field.displayField || 'name';
        setLoadig(true);
        return (0, _xadmin.api)(field.schema).query({
          limit: 1000,
          fields: ['id', displayField]
        }, inputValue ? {
          search: {
            [displayField]: {
              like: inputValue
            }
          }
        } : {}).then((_ref9) => {
          var {
            items
          } = _ref9;
          setLoadig(false);
          setOptions(items.map(item => ({
            value: item.id,
            label: item[displayField],
            item
          })));
        });
      }, [model, field]);

      _react.default.useEffect(() => {
        loadOptions();
      }, []);

      return {
        loadOptions,
        loading,
        options
      };
    }
  }
};
exports.default = _default;