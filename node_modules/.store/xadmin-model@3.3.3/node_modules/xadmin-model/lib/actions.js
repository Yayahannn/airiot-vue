"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash"));

var _xadmin = _interopRequireWildcard(require("xadmin"));

var _xadminUi = require("xadmin-ui");

var _xadminI18n = require("xadmin-i18n");

var _recoil = require("recoil");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _default = {
  items: {
    modelBatchActions: {
      type: 'map'
    }
  },
  modelBatchActions: {
    edit: {
      default: true,
      component: props => {
        var model = props.model;

        if (model.batchChangeFields && !!model.permission && !!model.permission.edit) {
          return /*#__PURE__*/_react.default.createElement(_xadminUi.C, _extends({
            is: "Model.BatchChange"
          }, props));
        } else {
          return null;
        }
      }
    },
    delete: {
      default: true,
      component: props => {
        var model = props.model;

        if (!!model.permission && !!model.permission.delete) {
          return /*#__PURE__*/_react.default.createElement(_xadminUi.C, _extends({
            is: "Model.BatchDelete"
          }, props));
        } else {
          return null;
        }
      }
    }
  },
  hooks: {
    'model.batchActions': () => {
      var {
        model
      } = (0, _xadmin.use)('model');

      var modelActions = _xadmin.default.get('modelBatchActions');

      var actions = model.batchActions === undefined ? Object.keys(modelActions).filter(k => modelActions[k].default) : model.batchActions;

      var renderActions = _react.default.useCallback(actProps => {
        return actions ? actions.map((action, i) => {
          var Action = _lodash.default.isString(action) && modelActions[action] ? modelActions[action].component : action;

          if (Action) {
            return /*#__PURE__*/_react.default.createElement(Action, _extends({
              key: "model--batch-action-".concat(i)
            }, actProps));
          }

          return null;
        }).filter(Boolean) : null;
      }, [actions]);

      return {
        actions,
        renderActions
      };
    },
    'actons.batch_delete': args => {
      var {
        model,
        rest,
        atoms
      } = (0, _xadmin.use)('model');
      var {
        getItems
      } = (0, _xadmin.use)('model.getItems');
      var message = (0, _xadmin.use)('message');
      var {
        canDelete
      } = (0, _xadmin.use)('model.permission');
      var loading = (0, _recoil.useRecoilValue)(atoms.loading('delete_items'));
      var onBatchDelete = (0, _recoil.useRecoilCallback)((_ref) => {
        var {
          snapshot,
          set,
          reset
        } = _ref;
        return /*#__PURE__*/_asyncToGenerator(function* () {
          var items = snapshot.getLoadable(atoms.selected).contents;
          set(atoms.loading('delete_items'), true);

          try {
            if (rest.batchSave) {
              yield rest.batchSave(items.map(item => item.id));
            } else {
              yield Promise.all(items.map(item => rest.delete(item.id)));
            } // clear selected


            reset(atoms.selected); // show message

            if (message !== null && message !== void 0 && message.success && (args === null || args === void 0 ? void 0 : args.successMessage) !== false) {
              var object = model.title || model.name;
              var noticeMessage = _lodash.default.isString(args === null || args === void 0 ? void 0 : args.successMessage) ? args.successMessage : (0, _xadminI18n._t)('Delete {{object}} success', {
                object
              });
              message === null || message === void 0 ? void 0 : message.success(noticeMessage);
            } // get items


            getItems();
            return null;
          } catch (err) {
            _xadmin.default.error(err);

            throw err.formError || err.json || err;
          } finally {
            set(atoms.loading('delete_items'), false);
          }
        });
      }, [getItems, model]);
      return {
        loading,
        canDelete,
        onBatchDelete
      };
    },
    'actons.batch_change': args => {
      var {
        model,
        rest,
        atoms
      } = (0, _xadmin.use)('model');
      var {
        getItems
      } = (0, _xadmin.use)('model.getItems');
      var message = (0, _xadmin.use)('message');
      var {
        canEdit
      } = (0, _xadmin.use)('model.permission');
      var loading = (0, _recoil.useRecoilValue)(atoms.loading('save_items'));
      var onBatchChange = (0, _recoil.useRecoilCallback)((_ref3) => {
        var {
          snapshot,
          set
        } = _ref3;
        return /*#__PURE__*/function () {
          var _ref4 = _asyncToGenerator(function* (value) {
            var items = snapshot.getLoadable(atoms.selected).contents;
            set(atoms.loading('save_items'), true);

            try {
              var ret;

              if (rest.batchDelte) {
                ret = yield rest.batchDelte(items, value);
              } else {
                ret = yield Promise.all(items.map(item => rest.save(_objectSpread({
                  id: item.id
                }, value), true)));
              } // show message


              if (message !== null && message !== void 0 && message.success && (args === null || args === void 0 ? void 0 : args.successMessage) !== false) {
                var object = model.title || model.name;
                var noticeMessage = _lodash.default.isString(args === null || args === void 0 ? void 0 : args.successMessage) ? args.successMessage : (0, _xadminI18n._t)('Batch Save {{object}} success', {
                  object
                });
                message === null || message === void 0 ? void 0 : message.success(noticeMessage);
              } // update items


              if (_lodash.default.isNil(ret) || _lodash.default.isEmpty(ret)) {
                getItems();
              } else {
                ret.forEach(item => set(atoms.item(item.id), item));
              }

              return ret;
            } catch (err) {
              _xadmin.default.error(err);

              throw err.formError || err.json || err;
            } finally {
              set(atoms.loading('save_items'), false);
            }
          });

          return function (_x) {
            return _ref4.apply(this, arguments);
          };
        }();
      }, [getItems, model]);
      return {
        loading,
        fields: model.batchChangeFields || [],
        canEdit,
        onBatchChange
      };
    }
  }
};
exports.default = _default;