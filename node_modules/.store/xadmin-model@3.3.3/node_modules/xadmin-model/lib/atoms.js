"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _recoil = require("recoil");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var modelAtoms = (k, model) => {
  var ids = (0, _recoil.atom)({
    key: k('ids'),
    default: []
  });
  var item = (0, _recoil.atomFamily)({
    key: k('item'),
    default: {}
  });
  var items = (0, _recoil.selector)({
    key: k('items'),
    get: (_ref) => {
      var {
        get: _get
      } = _ref;
      return _get(ids).map(id => _get(item(id))).filter(item => !_lodash.default.isNil(item));
    },
    set: (_ref2, newItems) => {
      var {
        set: _set
      } = _ref2;
      var newIds = newItems.map(record => {
        if (_lodash.default.isNil(record.id)) {
          // record without id field should throw warnning.
          return null;
        }

        _set(item(record.id), record);

        return record.id;
      }).filter(Boolean);

      _set(ids, newIds);
    }
  });
  var count = (0, _recoil.atom)({
    key: k('count'),
    default: 0
  });
  var selected = (0, _recoil.atom)({
    key: k('selected'),
    default: []
  });
  var option = (0, _recoil.atom)({
    key: k('option'),
    default: {}
  });

  var optionSelector = key => (0, _recoil.selector)({
    key: k(key),
    get: (_ref3) => {
      var {
        get: _get2
      } = _ref3;
      return _get2(option)[key];
    },
    set: (_ref4, value) => {
      var {
        get,
        set: _set2
      } = _ref4;

      _set2(option, _objectSpread(_objectSpread({}, get(option)), {}, {
        [key]: value
      }));
    }
  });

  var fields = optionSelector('fields');
  var order = optionSelector('order');
  var limit = optionSelector('limit');
  var skip = optionSelector('skip');
  var wheres = (0, _recoil.atom)({
    key: k('wheres'),
    default: {}
  });
  var where = (0, _recoil.selectorFamily)({
    key: k('where'),
    get: id => (_ref5) => {
      var {
        get
      } = _ref5;
      return get(wheres)[id];
    },
    set: id => (_ref6, where) => {
      var {
        get,
        set
      } = _ref6;
      set(wheres, _objectSpread(_objectSpread({}, _lodash.default.omit(get(wheres), id)), !_lodash.default.isEmpty(where) ? {
        [id]: where
      } : {}));
      set(skip, 0);
    }
  });
  var loading = (0, _recoil.atomFamily)({
    key: k('loading'),
    default: false
  });
  var itemSelected = (0, _recoil.selectorFamily)({
    key: k('itemSelected'),
    get: id => (_ref7) => {
      var {
        get
      } = _ref7;
      return get(selected).find(item => item.id == id) !== undefined;
    },
    set: id => (_ref8, isSelect) => {
      var {
        get,
        set
      } = _ref8;
      var selectedItems = get(selected).filter(i => {
        return i.id !== id;
      });

      if (isSelect) {
        selectedItems.push(get(item(id)));
      }

      set(selected, selectedItems);
    }
  });
  var allSelected = (0, _recoil.selector)({
    key: k('allSelected'),
    get: (_ref9) => {
      var {
        get: _get3
      } = _ref9;

      var selects = _get3(selected).map(item => item.id);

      return _lodash.default.every(_get3(ids), id => selects.indexOf(id) >= 0);
    },
    set: (_ref10, selectAll) => {
      var {
        get,
        set: _set3
      } = _ref10;

      if (selectAll) {
        _set3(selected, _lodash.default.unionWith(get(selected), get(items), (a, b) => a.id == b.id));
      } else {
        _set3(selected, []);
      }
    }
  });
  var itemOrder = (0, _recoil.selectorFamily)({
    key: k('itemOrder'),
    get: field => (_ref11) => {
      var {
        get
      } = _ref11;
      var orders = get(order);
      return orders !== undefined ? orders[field] || '' : '';
    },
    set: field => (_ref12, newOrder) => {
      var {
        get,
        set
      } = _ref12;
      var orders = get(order);
      set(order, _objectSpread(_objectSpread({}, orders), {}, {
        [field]: newOrder
      }));
    }
  });
  return {
    ids,
    item,
    items,
    selected,
    count,
    option,
    optionSelector,
    fields,
    order,
    limit,
    skip,
    wheres,
    where,
    loading,
    itemSelected,
    allSelected,
    itemOrder
  };
};

var _default = modelAtoms;
exports.default = _default;