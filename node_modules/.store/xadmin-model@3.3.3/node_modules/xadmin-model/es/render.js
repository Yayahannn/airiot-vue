function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import moment from 'moment';
import _ from 'lodash';
import app from 'xadmin';
import { Icon, C } from 'xadmin-ui';
export default [(SubPrev, schema) => {
  if (schema.renderTemplate) {
    return (_ref) => {
      var {
        value,
        wrap: WrapComponent
      } = _ref,
          props = _objectWithoutProperties(_ref, ["value", "wrap"]);

      var html = _.template(schema.renderTemplate)(_objectSpread({
        value
      }, props));

      return /*#__PURE__*/React.createElement(WrapComponent, null, /*#__PURE__*/React.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: html
        }
      }));
    };
  } else if (schema.type == 'string' && ['time', 'date', 'date-time', 'datetime'].indexOf(schema.format) > -1) {
    var dtf = app.load_dict('config').date_format || {};
    var format = schema.dateFormat || {
      time: dtf.time || 'LT',
      date: dtf.date || 'LL',
      'date-time': dtf.datetime || 'LLL',
      'datetime': dtf.datetime || 'LLL'
    }[schema.format];
    return (_ref2) => {
      var {
        value,
        wrap: WrapComponent
      } = _ref2;

      if (!_.isNil(value)) {
        var time = moment(value);
        return /*#__PURE__*/React.createElement(WrapComponent, null, time.format(format));
      } else {
        return /*#__PURE__*/React.createElement(WrapComponent, null, /*#__PURE__*/React.createElement("span", {
          className: "text-muted"
        }, "-"));
      }
    };
  } else if (schema.type == 'string' && schema.enum && schema.enum_title) {
    return (_ref3) => {
      var {
        value,
        wrap: WrapComponent
      } = _ref3;
      var result = null;
      var index = schema.enum.indexOf(value);

      if (_.isArray(schema.enum_title) && index > -1) {
        result = schema.enum_title[index];
      } else {
        result = schema.enum_title[value];
      }

      return /*#__PURE__*/React.createElement(WrapComponent, null, result || value);
    };
  } else if ((schema.type == 'number' || schema.type == 'integer') && schema.enum && schema.enum_title) {
    return (_ref4) => {
      var {
        value,
        wrap: WrapComponent
      } = _ref4;
      var result = null;
      var index = schema.enum.indexOf(value);

      if (_.isArray(schema.enum_title) && index > -1) {
        result = schema.enum_title[index];
      }

      return /*#__PURE__*/React.createElement(WrapComponent, null, result || value);
    };
  } else if (schema.type == 'boolean') {
    return (_ref5) => {
      var {
        value,
        wrap: WrapComponent
      } = _ref5;
      return /*#__PURE__*/React.createElement(WrapComponent, {
        style: {
          textAlign: 'center'
        }
      }, /*#__PURE__*/React.createElement(C, {
        is: "Model.BooleanIcon",
        value: value,
        schema: schema
      }));
    };
  } else if (schema.type == 'array') {
    return (_ref6) => {
      var {
        value,
        field,
        wrap: WrapComponent
      } = _ref6;
      var fieldName = "".concat(field, "__items");

      var itemWrap = (_ref7) => {
        var {
          children
        } = _ref7;
        return /*#__PURE__*/React.createElement("span", null, children, ', ');
      };

      var lastItemWrap = (_ref8) => {
        var {
          children
        } = _ref8;
        return /*#__PURE__*/React.createElement("span", null, children);
      };

      if (!_.isArray(value)) {
        if (_.isString(value)) {
          value = value.split(',');
        } else {
          value = [value];
        }
      }

      var renderValue = value ? value.map((item, index) => {
        return /*#__PURE__*/React.createElement(C, {
          is: "Model.DataItem",
          nest: true,
          item: {
            [fieldName]: item
          },
          field: fieldName,
          schema: schema.items,
          wrap: value.length - 1 > index ? itemWrap : lastItemWrap
        });
      }) : null;
      return /*#__PURE__*/React.createElement(WrapComponent, null, renderValue);
    };
  } else if (schema.type == 'string' && schema.format == 'email') {
    return (_ref9) => {
      var {
        value,
        wrap: WrapComponent
      } = _ref9;
      return /*#__PURE__*/React.createElement(WrapComponent, null, value ? /*#__PURE__*/React.createElement("a", {
        href: "mailto:".concat(value)
      }, value) : '');
    };
  } else if (schema.type == 'object') {
    return (_ref10) => {
      var {
        value,
        wrap
      } = _ref10;
      var displayField = schema.display_field || 'name';
      var WrapComponent = wrap;
      return /*#__PURE__*/React.createElement(C, {
        is: "Model.DataItem",
        nest: true,
        item: value,
        field: displayField,
        schema: schema.properties[displayField],
        wrap: wrap
      });
    };
  }

  return SubPrev;
}];