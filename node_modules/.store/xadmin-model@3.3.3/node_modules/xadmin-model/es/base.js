function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import _ from 'lodash';
import { Block, app, use } from 'xadmin';
import { C } from 'xadmin-ui';
import { Routes, Route } from "react-router-dom";
import { RecoilRoot, useRecoilSnapshot, useRecoilCallback } from 'recoil';
import modelAtoms from './atoms';
var ModelContext = /*#__PURE__*/React.createContext(null);

var getModel = (name, key, props) => {
  var model = app.get('models')[name];

  if (!model) {
    throw Error("Model '".concat(name, "' not found!"));
  }

  model.name = model.name || name;
  return _objectSpread(_objectSpread({}, model), {}, {
    key: key || model.name
  }, props);
};

var DebugObserver = () => {
  var snapshot = useRecoilSnapshot();
  React.useEffect(() => {
    if (!snapshot) return;
    console.debug('[Recoil] state change:');

    for (var node of snapshot.getNodes_UNSTABLE({
      isModified: true
    })) {
      console.debug(node.key, snapshot.getLoadable(node));
    }
  }, [snapshot]);
  return null;
};

var ModelInitial = (_ref) => {
  var {
    model,
    initialValues,
    children
  } = _ref;
  var query = use('query');
  var [loading, setLoading] = React.useState(true);
  var initializeState = useRecoilCallback((_ref2) => {
    var {
      set
    } = _ref2;
    return () => {
      var initial = initialValues || {};

      if (model.initialValues) {
        var modelInitial = _.isFunction(model.initialValues) ? model.initialValues() : model.initialValues;
        initial = _objectSpread(_objectSpread({}, modelInitial), initial);
      }

      var {
        wheres = {}
      } = initial,
          option = _objectWithoutProperties(initial, ["wheres"]);

      var defaultOpt = {
        fields: [...(model.listFields || [])],
        order: model.defaultOrder || model.orders || {},
        limit: model.defaultPageSize || 15,
        skip: 0
      };

      if (query && !_.isEmpty(query)) {
        var filterQuery = Object.keys(query).reduce((p, key) => {
          if (key.startsWith('f_')) {
            p[key.substring(2)] = query[key];
          }

          return p;
        }, {});

        if (!_.isEmpty(filterQuery)) {
          wheres.param_filter = filterQuery;
        }
      }

      set(model.atoms.option, _objectSpread(_objectSpread({}, defaultOpt), option));
      set(model.atoms.wheres, wheres);
    };
  }, [initialValues, model, query]);
  React.useEffect(() => {
    initializeState();
    setLoading(false);
  }, []);
  return !loading ? children : null;
};

var Model = (_ref3) => {
  var {
    name,
    schema,
    modelKey,
    initialValues,
    children,
    debug,
    props: modelProps
  } = _ref3;
  var model = React.useMemo(() => {
    var model = name ? getModel(name, modelKey, modelProps) : _objectSpread(_objectSpread({}, schema), {}, {
      key: modelKey || schema.name
    }, modelProps);
    var atoms = [modelAtoms, ...app.get('modelAtoms')].reduce((p, getAtoms) => {
      return _objectSpread(_objectSpread({}, p), getAtoms(id => "model.".concat(model.key, ".").concat(id), model));
    }, {});
    return _objectSpread(_objectSpread({}, model), {}, {
      atoms
    });
  }, [name, schema, modelKey]); // const initializeState = React.useCallback(({ set }) => {
  //   let initial = initialValues || {}
  //   if(model.initialValues) {
  //     let modelInitial = _.isFunction(model.initialValues) ? model.initialValues() : model.initialValues
  //     initial = { ...modelInitial, ...initial }
  //   }
  //   const { wheres={}, ...option } = initial
  //   const defaultOpt = {
  //     fields: [ ...(model.listFields || []) ],
  //     order: model.defaultOrder || model.orders || {},
  //     limit: model.defaultPageSize || 15,
  //     skip: 0
  //   }
  //   if(query && !_.isEmpty(query)) {
  //     wheres.param_filter = query
  //   }
  //   set(model.atoms.option, { ...defaultOpt, ...option })
  //   set(model.atoms.wheres, wheres)
  // }, [ initialValues, model, query ])

  return model && /*#__PURE__*/React.createElement(RecoilRoot, {
    override: false
  }, (model.debug || debug) && /*#__PURE__*/React.createElement(DebugObserver, null), /*#__PURE__*/React.createElement(ModelContext.Provider, {
    value: model
  }, /*#__PURE__*/React.createElement(ModelInitial, {
    initialValues: initialValues,
    model: model
  }, children)));
};

var ModelBlock = props => /*#__PURE__*/React.createElement(ModelContext.Consumer, null, model => /*#__PURE__*/React.createElement(Block, _extends({
  model: model
}, props), blocks => {
  var modelBlock = model && model.blocks && model.blocks[props.name];

  if (modelBlock) {
    var mb = modelBlock(props);
    blocks = blocks ? [mb, ...blocks] : [mb];
  }

  return props.children ? props.children(blocks) : blocks;
}));

var ModelRoutes = () => {
  var {
    model
  } = use('model');
  var ModelList = model.components && model.components['ListPage'] || C('Model.ListPage');
  var ModelDetail = model.components && model.components['DetailPage'] || C('Model.DetailPage');
  var ModelAddForm = model.components && model.components['AddPage'] || C('Model.FormPage');
  var ModelEditForm = model.components && model.components['EditPage'] || C('Model.FormPage');
  return /*#__PURE__*/React.createElement(Routes, null, (!model.permission || model.permission.view) && /*#__PURE__*/React.createElement(Route, {
    path: "/",
    element: /*#__PURE__*/React.createElement(ModelList, null)
  }), (!model.permission || model.permission.view) && /*#__PURE__*/React.createElement(Route, {
    path: "list",
    element: /*#__PURE__*/React.createElement(ModelList, null)
  }), (!model.permission || model.permission.view) && /*#__PURE__*/React.createElement(Route, {
    path: ":id/detail",
    element: /*#__PURE__*/React.createElement(ModelDetail, null)
  }), (!model.permission || model.permission.add) && /*#__PURE__*/React.createElement(Route, {
    path: "add",
    element: /*#__PURE__*/React.createElement(ModelAddForm, null)
  }), (!model.permission || model.permission.edit) && /*#__PURE__*/React.createElement(Route, {
    path: ":id/edit",
    element: /*#__PURE__*/React.createElement(ModelEditForm, null)
  }));
};

export { ModelContext, ModelBlock, ModelRoutes, Model };