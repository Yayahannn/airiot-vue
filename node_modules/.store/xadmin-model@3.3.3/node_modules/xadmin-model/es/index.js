import React from 'react';
import { C, Icon, Menu } from 'xadmin-ui';
import { Model, ModelContext, ModelBlock, ModelRoutes } from './base';
import hooks from './hooks';
import fieldRenders from './render';
import relate from './relate';
import filter from './filter';
import actions from './actions';
import search from './search';
import modalform from './modalform';
import reldetail from './reldetail';
import * as utils from './utils';
import _ from 'lodash';
var app = {
  name: 'xadmin.model',
  items: {
    models: {
      type: 'map'
    },
    fieldRenders: {
      type: 'array'
    },
    modelActions: {
      type: 'map'
    },
    modelAtoms: {
      type: 'array'
    }
  },
  components: {
    'Model.Routes': ModelRoutes
  },
  blocks: app => {
    var models = app.get('models');
    return {
      'main.menu': () => {
        return Object.keys(models).map(name => {
          var _model$permission, _model$ui, _model$ui2;

          var model = models[name];

          if ((_model$permission = model.permission) !== null && _model$permission !== void 0 && _model$permission.view && (_model$ui = model.ui) !== null && _model$ui !== void 0 && _model$ui.showMenu && (_model$ui2 = model.ui) !== null && _model$ui2 !== void 0 && _model$ui2.menuPath) {
            return /*#__PURE__*/React.createElement(Menu.Item, {
              itemKey: "main-menu-item-model-".concat(name),
              onItemClick: () => app.go(model.ui.menuPath),
              icon: /*#__PURE__*/React.createElement(Icon, {
                name: model.icon || name
              })
            }, model.title);
          }
        }).filter(item => item !== undefined);
      }
    };
  },
  routers: app => {
    var models = app.get('models');
    var {
      _t
    } = app.context;
    var routes = {
      '/app/': [{
        path: 'model'
      }]
    };
    var autoModelRoutes = app.config('autoModelRoutes');
    var defaultRootRoute = '/app/model';

    if (autoModelRoutes === false) {
      return routes;
    } else if (_.isString(autoModelRoutes)) {
      defaultRootRoute = autoModelRoutes;
    }

    var _loop = function _loop(name) {
      var model = models[name];
      var modelName = model.title || model.name;
      var rs = _.isArray(model.route) ? model.route : [model.route || {
        parentPath: defaultRootRoute,
        path: name
      }];
      rs.forEach(r => {
        var parent = r.parentPath || '/';
        var path = _.isString(r) ? r : r.path;

        if (!routes[parent]) {
          routes[parent] = [];
        }

        routes[parent].push({
          path: "".concat(path, "/*"),
          breadcrumbName: _t('{{name}} List', {
            name: modelName
          }),
          element: /*#__PURE__*/React.createElement(Model, {
            key: "model.".concat(parent, ".").concat(path),
            name: name
          }, /*#__PURE__*/React.createElement(ModelRoutes, null))
        });
      });
    };

    for (var name in models) {
      _loop(name);
    }

    return routes;
  },
  hooks,
  fieldRenders,
  modelActions: {
    edit: {
      default: true,
      component: C.lazy('Model.ActionEdit')
    },
    delete: {
      default: true,
      component: C.lazy('Model.ActionDelete')
    }
  }
};
var apps = {
  relate,
  filter,
  actions,
  search,
  modalform,
  reldetail
};
export { Model, ModelBlock, ModelContext, ModelRoutes, apps, utils };
export default app;