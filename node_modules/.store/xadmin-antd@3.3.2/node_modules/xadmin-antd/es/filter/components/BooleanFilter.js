function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import _ from 'lodash';
import app from 'xadmin';
import { _t } from 'xadmin-i18n';
import { Switch, Checkbox, Tooltip } from 'antd';
export default (props => {
  var {
    input: {
      name,
      value,
      onChange
    },
    field
  } = props,
      inputProps = _objectWithoutProperties(props.input, ["name", "value", "onChange"]);

  var disabled = value === null || value === undefined || value === '';
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {
    title: _t('Use this filter')
  }, disabled ? /*#__PURE__*/React.createElement(Checkbox, {
    checked: false,
    onClick: () => onChange(true)
  }) : /*#__PURE__*/React.createElement(Checkbox, {
    checked: true,
    onClick: () => onChange(null)
  })), ' ', /*#__PURE__*/React.createElement(Switch, {
    checked: value,
    disabled: disabled,
    onChange: onChange,
    checkedChildren: field.boolLabel ? field.boolLabel[0] : _t('True'),
    unCheckedChildren: field.boolLabel ? field.boolLabel[1] : _t('False')
  }));
});