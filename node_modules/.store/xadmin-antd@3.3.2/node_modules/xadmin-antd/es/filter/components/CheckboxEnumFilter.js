function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import _ from 'lodash';
import { Checkbox } from 'antd';
import app from 'xadmin';
export default class EnumFilter extends React.Component {
  constructor(props, context) {
    super(props, context);

    _defineProperty(this, "onChange", (e, value) => {
      var {
        onChange
      } = this.props.input;
      var {
        checks
      } = this.state;
      var newChecks = checks;

      if (e.target.checked) {
        if (checks.indexOf(value) == -1) {
          newChecks = [...checks, value];
        }
      } else {
        if (checks.indexOf(value) >= 0) {
          newChecks = [..._.pull(checks, value)];
        }
      }

      if (newChecks != checks) {
        this.setState({
          checks: newChecks
        }, () => {
          onChange(this.getValue());
        });
      }
    });

    _defineProperty(this, "clear", () => {
      var {
        onChange
      } = this.props.input;
      this.setState({
        checks: []
      }, () => {
        onChange(this.getValue());
      });
    });

    var _value = props.input.value; // like

    if (_value) {
      if (typeof _value != 'object') {
        this.state = {
          checks: [_value]
        };
      } else {
        this.state = {
          checks: [..._value['inq']]
        };
      }
    } else {
      this.state = {
        checks: []
      };
    }
  }

  getValue(e) {
    var {
      checks
    } = this.state;

    if (checks.length > 1) {
      return {
        inq: checks
      };
    } else if (checks.length > 0) {
      return checks[0];
    } else {
      return null;
    }
  }

  shouldComponentUpdate(nextProps) {
    return this.props != nextProps;
  }

  componentWillReceiveProps(nextProps) {
    if (this.props != nextProps) {
      var value = nextProps.input.value; // like

      if (value) {
        if (typeof value != 'object') {
          this.setState({
            checks: [value]
          });
        } else {
          this.setState({
            checks: [...value['inq']]
          });
        }
      } else {
        this.setState({
          checks: []
        });
      }
    }
  }

  render() {
    var _this$props = this.props,
        {
      input: {
        name,
        value,
        onBlur,
        onChange
      },
      field
    } = _this$props,
        inputProps = _objectWithoutProperties(_this$props.input, ["name", "value", "onBlur", "onChange"]);

    var {
      checks
    } = this.state;
    var {
      _t
    } = app.context;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Checkbox, _extends({
      key: "check-clear",
      id: "check-clear",
      checked: checks.length == 0,
      onChange: e => {
        if (e.target.checked) {
          this.clear();
        }
      }
    }, inputProps), _t('All')), field.titleMap.map(option => {
      return /*#__PURE__*/React.createElement(Checkbox, _extends({
        key: option.name,
        id: option.name,
        checked: checks.indexOf(option.value) >= 0,
        onChange: e => this.onChange(e, option.value)
      }, inputProps, {
        value: option.value
      }), option.name);
    }));
  }

}