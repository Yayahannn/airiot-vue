function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { app, config } from 'xadmin';
import { FilterOutlined, SearchOutlined } from '@ant-design/icons';
import { Row, Col, Form, Space, Button, Card, Modal, Typography, Grid } from 'antd';
var {
  useBreakpoint
} = Grid;

var FilterForm = (_ref) => {
  var {
    children,
    invalid,
    handleSubmit,
    submitting,
    options,
    resetFilter
  } = _ref;
  var {
    _t
  } = app.context;
  return /*#__PURE__*/React.createElement(Form, {
    onSubmit: handleSubmit
  }, children, options && options.submitOnChange ? null : /*#__PURE__*/React.createElement(Form.Item, {
    style: {
      textAlign: 'center'
    }
  }, /*#__PURE__*/React.createElement(Space, null, /*#__PURE__*/React.createElement(Button, {
    disabled: invalid,
    loading: submitting,
    type: "primary",
    onClick: handleSubmit,
    icon: /*#__PURE__*/React.createElement(SearchOutlined, null)
  }, _t('Search')), /*#__PURE__*/React.createElement(Button, {
    disabled: submitting,
    onClick: resetFilter
  }, _t('Reset')))));
};

var NavForm = (_ref2) => {
  var {
    children,
    invalid,
    handleSubmit,
    submitting,
    options,
    resetFilter
  } = _ref2;
  var {
    _t
  } = app.context;
  return /*#__PURE__*/React.createElement(Form, {
    layout: "inline",
    onSubmit: handleSubmit
  }, children, options && options.submitOnChange ? null : /*#__PURE__*/React.createElement(Form.Item, null, /*#__PURE__*/React.createElement(Space, null, /*#__PURE__*/React.createElement(Button, {
    disabled: invalid,
    loading: submitting,
    type: "primary",
    onClick: handleSubmit,
    icon: /*#__PURE__*/React.createElement(SearchOutlined, null)
  }, _t('Search')), /*#__PURE__*/React.createElement(Button, {
    disabled: submitting,
    onClick: resetFilter
  }, _t('Reset')))));
};

var FilterOpenLink = (_ref3) => {
  var {
    count,
    onClick,
    show
  } = _ref3;
  var {
    _t
  } = app.context;
  var screens = useBreakpoint();
  return screens.xxl == false && count > 3 || count > 4 ? /*#__PURE__*/React.createElement(Typography.Link, {
    onClick: onClick
  }, show ? _t('Collapse') : _t('Expand')) : null;
};

var Submenu = (_ref4) => {
  var {
    children,
    invalid,
    handleSubmit,
    submitting,
    options,
    resetFilter
  } = _ref4;
  var {
    _t
  } = app.context;
  var defaultShowAllFilter = config('filter') && config('filter').submenuShowAllFilter == true;
  var [showAllFilter, setShowAllFilter] = React.useState(defaultShowAllFilter);
  return /*#__PURE__*/React.createElement(Form, {
    className: "ant-advanced-search-form",
    onSubmit: handleSubmit
  }, /*#__PURE__*/React.createElement(Card, {
    style: {
      marginBottom: '.5rem',
      overflow: 'hidden'
    }
  }, /*#__PURE__*/React.createElement(Row, {
    gutter: 8,
    style: {
      flexWrap: children.length <= 3 || showAllFilter ? 'wrap' : 'nowrap'
    }
  }, children), options && options.submitOnChange ? null : /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Col, {
    span: 24,
    style: {
      textAlign: 'center'
    }
  }, /*#__PURE__*/React.createElement(Space, null, /*#__PURE__*/React.createElement(Button, {
    disabled: invalid,
    loading: submitting,
    type: "primary",
    onClick: handleSubmit,
    icon: /*#__PURE__*/React.createElement(SearchOutlined, null)
  }, _t('Search')), /*#__PURE__*/React.createElement(Button, {
    disabled: submitting,
    onClick: resetFilter
  }, _t('Reset')), /*#__PURE__*/React.createElement(FilterOpenLink, {
    count: children.length,
    onClick: () => setShowAllFilter(!showAllFilter),
    show: showAllFilter
  }))))));
};

class FilterModal extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      show: false
    });

    _defineProperty(this, "onClose", () => {
      this.setState({
        show: false
      });
    });
  }

  render() {
    var {
      _t
    } = app.context;
    var {
      children,
      invalid,
      handleSubmit,
      submitting,
      options,
      resetFilter
    } = this.props;
    var icon = submitting ? 'spinner fa-spin' : 'floppy-o';
    var buttons = options && options.submitOnChange ? {} : {
      okText: _t('Search'),
      cancelText: _t('Reset'),
      okButtonProps: {
        disabled: invalid,
        loading: submitting,
        icon: /*#__PURE__*/React.createElement(SearchOutlined, null)
      },
      onOk: () => {
        handleSubmit();
        this.onClose();
      },
      onCancel: () => {
        resetFilter();
        this.onClose();
      }
    };
    return [/*#__PURE__*/React.createElement(Button, {
      key: "filter-btn",
      onClick: () => this.setState({
        show: true
      })
    }, /*#__PURE__*/React.createElement(FilterOutlined, null), " ", _t('Filter')), /*#__PURE__*/React.createElement(Modal, _extends({
      key: "filter-modal",
      title: _t('Filter Form'),
      visible: this.state.show
    }, buttons), /*#__PURE__*/React.createElement(Form, {
      onSubmit: handleSubmit
    }, children))];
  }

}

export { FilterForm, NavForm, Submenu, FilterModal };