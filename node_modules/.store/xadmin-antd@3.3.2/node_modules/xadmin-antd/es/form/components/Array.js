function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { FieldArray } from 'xadmin-form';
import { DeleteOutlined, PlusOutlined } from '@ant-design/icons';
import { Card, Button } from 'antd';
import { objectBuilder, prefixFieldKey } from 'xadmin-form';
import app from 'xadmin';

var defaultItemsRender = (_ref) => {
  var {
    fields,
    meta: {
      touched,
      error
    },
    field,
    fieldsBuilder
  } = _ref;
  var {
    items,
    label
  } = field;
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Button, {
    onClick: () => fields.push(null)
  }, /*#__PURE__*/React.createElement(PlusOutlined, null)), fields.map((name, index) => {
    var removeBtn = /*#__PURE__*/React.createElement(Button, {
      size: "small",
      onClick: e => {
        fields.remove(index);
        e.persist();
      },
      style: {
        float: 'right'
      }
    }, /*#__PURE__*/React.createElement(DeleteOutlined, null));
    var fieldsComponent = fieldsBuilder(name, index, removeBtn);
    return fieldsComponent.length > 1 ? /*#__PURE__*/React.createElement(Card, {
      key: "items".concat(index),
      size: "small",
      title: label + ' ' + (index + 1),
      extra: removeBtn,
      style: {
        width: '100%',
        marginTop: '0.5rem'
      }
    }, fieldsComponent) : fieldsComponent;
  }), touched && error ? error : null);
};

export default ((_ref2) => {
  var {
    input,
    label,
    meta,
    field,
    option,
    group
  } = _ref2;
  var renderItems = field.itemsRender || defaultItemsRender;

  if (typeof renderItems === 'string') {
    renderItems = app.load_dict('array_render')[renderItems];
  }

  var {
    items
  } = field;

  var fieldsBuilder = (name, index, removeBtn, itemLable) => {
    var itemLabel = itemLable || /*#__PURE__*/React.createElement("div", null, removeBtn ? removeBtn : '');
    var itemFields = items.fields ? items.fields.map(f => prefixFieldKey(f, name + '.')) : [_objectSpread(_objectSpread({}, items), {}, {
      key: name,
      name: name,
      label: itemLabel
    })];
    return objectBuilder(itemFields, items.render, option);
  };

  return /*#__PURE__*/React.createElement(FieldArray, {
    name: field.name,
    label: label,
    meta: meta,
    input: input,
    component: renderItems,
    field: field,
    group: group,
    fieldsBuilder: fieldsBuilder
  });
});