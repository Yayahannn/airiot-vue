function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import app, { use } from 'xadmin';
import { Loading } from 'xadmin-ui';
import { Transfer } from 'antd';
import _ from 'lodash';

var RelateMultiTransfer = (_ref) => {
  var {
    input: {
      value,
      onChange
    },
    field
  } = _ref;
  var {
    loading,
    options
  } = use('model.relate.select', {
    field
  });
  var data = React.useMemo(() => options.map(opt => _objectSpread({
    key: opt.value,
    title: opt.label
  }, opt)), [options]);

  var onSelectChange = targetKeys => {
    onChange(options.filter(opt => targetKeys.indexOf(opt.value) >= 0).map(opt => opt.item));
  };

  return loading ? /*#__PURE__*/React.createElement(Loading, null) : /*#__PURE__*/React.createElement(Transfer, _extends({
    key: "transfer",
    dataSource: data,
    showSearch: true,
    listStyle: {
      width: 200,
      height: 300
    },
    titles: ['选择', '取消'],
    targetKeys: value ? value.map(item => item.id) : [],
    onChange: onSelectChange,
    render: item => item.label
  }, field.attrs));
};

export default RelateMultiTransfer;