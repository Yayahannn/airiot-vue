function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import app from 'xadmin'; //import 'antd/dist/antd.min.css'

import { message as _message } from 'antd';
import { Main, App, Page, Loading, Icon, Dashboard } from './layout';
import { Menu, MenuItem } from './components/Menu';
import form from './form';
import model from './model';
import relate from './model/relate';
import filter from './filter';
import auth from './auth';
import effects from './effects';
import locales from './locales';
export default {
  name: 'xadmin.ui.antd',
  locales,
  components: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({
    Main,
    App,
    BaseApp: App,
    Page,
    Loading,
    Icon,
    Dashboard,
    Menu,
    'Menu.Item': MenuItem
  }, form.components), model.components), filter.components), relate.components), auth.components),
  form_fields: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, form.form_fields), filter.form_fields), relate.form_fields), auth.form_fields),
  hooks: {
    'message': () => _message
  },
  effects
};