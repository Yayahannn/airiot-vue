function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import _ from 'lodash';
import { _t } from 'xadmin-i18n';
import { Button, Dropdown, Select, Menu, Spin, Empty } from 'antd';
import app, { use } from 'xadmin';
import { Icon } from 'xadmin-ui';
var Option = Select.Option;

var AsyncSelect = (_ref) => {
  var {
    value,
    isOptionSelected,
    label,
    onChange,
    style,
    field
  } = _ref,
      extraProps = _objectWithoutProperties(_ref, ["value", "isOptionSelected", "label", "onChange", "style", "field"]);

  var {
    loadOptions,
    loading,
    options
  } = use('model.relate.select', {
    field
  });
  var data = React.useMemo(() => options.reduce((prev, opt) => {
    prev[opt.value] = _objectSpread({
      key: opt.value
    }, opt);
    return prev;
  }, {}), [options]);

  var onItemChange = selectOpt => {
    onChange(_.isArray(selectOpt) ? selectOpt.map((_ref2) => {
      var {
        key
      } = _ref2;
      return data[key] || _.find(value, v => v.key == key) || null;
    }).filter(Boolean) : data[selectOpt.key]);
  };

  var useOptions = React.useMemo(() => {
    var options = Object.values(data);

    if (extraProps.mode == 'multiple' && value) {
      var selected = value.map(v => v.key);
      options = options.filter(opt => selected.indexOf(opt.key) == -1);
    }

    return options;
  }, [data, extraProps.mode, value]);
  return /*#__PURE__*/React.createElement(Select, _extends({
    showSearch: true,
    labelInValue: true,
    value: value ? value : isOptionSelected ? Object.values(data).filter(isOptionSelected) : undefined,
    notFoundContent: loading ? /*#__PURE__*/React.createElement("div", {
      style: {
        margin: '2px',
        textAlign: 'center'
      }
    }, /*#__PURE__*/React.createElement(Spin, {
      size: "small"
    })) : /*#__PURE__*/React.createElement(Empty, null),
    onSearch: loadOptions,
    onChange: onItemChange,
    onBlur: () => {
      loadOptions(null);
    },
    filterOption: false,
    placeholder: label,
    style: _objectSpread({
      minWidth: 150
    }, style)
  }, extraProps), useOptions.map(d => /*#__PURE__*/React.createElement(Option, {
    key: d.key
  }, d.label)));
};

var RelateSelect = props => {
  var {
    input: {
      value: item,
      onChange: _onChange
    },
    label,
    field
  } = props;
  var displayField = field.displayField || 'name';
  return /*#__PURE__*/React.createElement(AsyncSelect, {
    value: item ? {
      item,
      label: item[displayField],
      key: item.id
    } : null,
    onChange: option => {
      _onChange(option.item);
    },
    field: field,
    label: label
  });
};

var RelateMultiSelect = props => {
  var {
    input: {
      value: items,
      onChange: _onChange2
    },
    label,
    field
  } = props;
  var displayField = field.displayField || 'name';
  return /*#__PURE__*/React.createElement(AsyncSelect, {
    mode: "multiple",
    value: items ? items.map(item => ({
      key: item.id,
      item,
      label: item[displayField]
    })) : null,
    onChange: options => {
      _onChange2(options.map(opt => opt.item));
    },
    field: field,
    label: label
  });
};

var FilterRelateSelect = props => {
  var {
    input: {
      value: selectId,
      onChange: _onChange3
    },
    label,
    field
  } = props;
  return /*#__PURE__*/React.createElement(AsyncSelect, {
    isOptionSelected: option => selectId && option.key == selectId,
    onChange: option => {
      _onChange3(option.value);
    },
    field: field,
    label: label
  });
};

var form_fields = {
  fkselect: {
    component: RelateSelect
  },
  multi_select: {
    component: RelateMultiSelect
  },
  filter_relate: {
    component: FilterRelateSelect,
    parse: (value, name) => {
      if (value && value.id) {
        return value.id;
      }

      return value;
    }
  }
};

var RelateContainer = (_ref3) => {
  var {
    data,
    model,
    children
  } = _ref3;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("h4", null, /*#__PURE__*/React.createElement(Icon, {
    name: model.icon
  }), " ", data[model.displayField || 'name']), children);
};

var RelateAction = (_ref4) => {
  var {
    model,
    item,
    actions
  } = _ref4,
      extraProps = _objectWithoutProperties(_ref4, ["model", "item", "actions"]);

  return /*#__PURE__*/React.createElement(Dropdown, {
    key: "dropdown-action-relate",
    overlay: /*#__PURE__*/React.createElement(Menu, null, actions.map((m, index) => /*#__PURE__*/React.createElement(Menu.Item, {
      key: index,
      onClick: () => app.go("/app/model/".concat(model.name, "/").concat(item.id, "/relations/").concat(m.name, "/"))
    }, m.title || m.name)))
  }, /*#__PURE__*/React.createElement(Button, {
    size: "small",
    className: "model-list-action"
  }, _t('Relates')));
};

export default {
  components: {
    'Relate.Action': RelateAction,
    'Relate.Container': RelateContainer
  },
  form_fields
};