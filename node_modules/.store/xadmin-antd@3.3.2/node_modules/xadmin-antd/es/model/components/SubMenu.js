import _ from 'lodash';
import React from 'react';
import { Button, Dropdown, Menu, Popover, Checkbox, Row, Col, Input, Space } from 'antd';
import { SettingOutlined } from '@ant-design/icons';
import { app, use } from 'xadmin';
import { _t } from 'xadmin-i18n';
import { ModelBlock } from 'xadmin-model';

var CountButton = () => {
  var {
    count
  } = use('model.count');
  return /*#__PURE__*/React.createElement(Button, null, _t('{{count}} records', {
    count
  }));
};

var PageSizeButton = () => {
  var {
    size,
    sizes,
    setPageSize
  } = use('model.pagesize');
  var [visible, setVisible] = React.useState(false);
  var [inputSize, setInputSize] = React.useState('');
  var input = /*#__PURE__*/React.createRef();

  var onSetPageSize = size => {
    setPageSize(size);
    setVisible(false);
  };

  var onInputSize = e => {
    if (e.key == 'Enter') {
      var _size = parseInt(inputSize);

      onSetPageSize(_size);
      setInputSize('');
    }

    e.persist();
  };

  return /*#__PURE__*/React.createElement(Dropdown, {
    key: "page-size-dropdown",
    onVisibleChange: setVisible,
    visible: visible,
    overlay: /*#__PURE__*/React.createElement(Menu, null, sizes.map(size => /*#__PURE__*/React.createElement(Menu.Item, {
      key: "size-".concat(size),
      onClick: () => setPageSize(size),
      eventKey: "size-".concat(size)
    }, _t('Set {{size}} per page', {
      size
    }))), /*#__PURE__*/React.createElement(Menu.Item, {
      key: "size-custom"
    }, /*#__PURE__*/React.createElement(Input, {
      placeholder: _t('Customize page size'),
      value: inputSize,
      onChange: e => setInputSize(e.target.value),
      precision: 0,
      onKeyPress: onInputSize,
      style: {
        width: 100
      }
    })))
  }, /*#__PURE__*/React.createElement(Button, null, _t('{{size}} per page', {
    size
  })));
};

var ColsDropdown = () => {
  var {
    selected,
    fields,
    changeFieldDisplay
  } = use('model.fields');
  var items = [];
  var showFields = Object.keys(fields).filter(name => fields[name].showInList !== false);
  var menuShow = showFields.length <= 10;

  var _loop = function _loop(name) {
    var field = fields[name],
        fieldName = name,
        title = field.title || name,
        fieldSelected = _.indexOf(selected, name) !== -1,
        onClick = e => {
      changeFieldDisplay([fieldName, e.target.checked]);
    },
        onClickBtn = () => {
      changeFieldDisplay([fieldName, !fieldSelected]);
    };

    if (menuShow) {
      items.push( /*#__PURE__*/React.createElement(Checkbox, {
        key: name,
        onChange: onClick,
        checked: fieldSelected
      }, title));
    } else {
      items.push( /*#__PURE__*/React.createElement(Col, {
        span: 3,
        key: name,
        style: {
          margin: '5px 0'
        }
      }, /*#__PURE__*/React.createElement(Button, {
        type: fieldSelected ? 'primary' : 'default',
        block: true,
        onClick: onClickBtn
      }, title)));
    }
  };

  for (var name of showFields) {
    _loop(name);
  }

  return /*#__PURE__*/React.createElement(Popover, {
    placement: "bottomRight",
    overlayStyle: {
      maxWidth: '80%'
    },
    content: menuShow ? items : /*#__PURE__*/React.createElement(Row, {
      gutter: 12
    }, items),
    trigger: "click"
  }, /*#__PURE__*/React.createElement(Button, {
    type: "text"
  }, /*#__PURE__*/React.createElement(SettingOutlined, null)));
};

export default ((_ref) => {
  var {
    children
  } = _ref;
  return /*#__PURE__*/React.createElement(Space, null, /*#__PURE__*/React.createElement(CountButton, null), /*#__PURE__*/React.createElement(PageSizeButton, null), /*#__PURE__*/React.createElement(ModelBlock, {
    name: "model.list.submenu.btngroup"
  }), /*#__PURE__*/React.createElement(ColsDropdown, null), children);
});