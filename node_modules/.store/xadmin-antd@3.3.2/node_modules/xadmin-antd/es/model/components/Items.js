function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import _ from 'lodash';
import { utils } from 'xadmin-model';
import { app, Block, use } from 'xadmin';
import { _t } from 'xadmin-i18n';
import { SchemaForm } from 'xadmin-form';
import { C, Loading } from 'xadmin-ui';
var {
  getFieldProp
} = utils;
import { CaretDownOutlined, CaretUpOutlined, CloseOutlined, DeleteOutlined, EditOutlined } from '@ant-design/icons';
import { Table, Tooltip, Empty, Menu, Dropdown, List, Card, Button, Popconfirm, Checkbox, Popover, Form } from 'antd';

var ItemEditFormLayout = props => {
  var {
    children,
    pristine,
    invalid,
    handleSubmit,
    submitting
  } = props;
  return /*#__PURE__*/React.createElement("form", {
    onSubmit: handleSubmit
  }, children, /*#__PURE__*/React.createElement(Button, {
    style: {
      marginTop: '-1rem'
    },
    block: true,
    htmlType: "submit",
    loading: submitting,
    disabled: pristine || invalid,
    size: "small"
  }, _t('Change')));
};

var ItemEditForm = props => {
  var {
    item,
    field,
    value,
    schema,
    onClose
  } = props;
  var {
    model
  } = use('model');
  var {
    saveItem
  } = use('model.save', props);

  var getSchema = () => {
    var formField = _.find(model.form || [], obj => obj && obj.key == field) || {
      key: field
    };
    var required = (model.required || []).indexOf(field) >= 0 ? {
      required: ['value']
    } : {};
    return _objectSpread({
      type: 'object',
      properties: {
        value: schema
      },
      form: [_objectSpread(_objectSpread({}, formField), {}, {
        key: 'value'
      })]
    }, required);
  };

  var [formSchema, setFormSchema] = React.useState(getSchema);
  React.useEffect(() => {
    setFormSchema(getSchema());
  }, [model, field, schema]);
  return /*#__PURE__*/React.createElement(SchemaForm, {
    initialValues: {
      id: item['id'],
      value
    },
    schema: formSchema,
    option: {
      group: C('Form.InlineGroup')
    },
    onSubmit: values => saveItem({
      id: values.id,
      [field]: values.value
    }, true),
    onSubmitSuccess: () => onClose(),
    component: ItemEditFormLayout
  });
};

var Item = props => {
  var {
    item,
    field,
    wrap
  } = props,
      itemProps = _objectWithoutProperties(props, ["item", "field", "wrap"]);

  var {
    value,
    schema,
    componentClass,
    editable
  } = use('model.list.item', props);
  var RawWrapComponent = wrap || 'span';
  var WrapComponent = editable ? RawWrapComponent : (_ref) => {
    var {
      children
    } = _ref,
        props = _objectWithoutProperties(_ref, ["children"]);

    var [edit, setEdit] = React.useState(false);
    return /*#__PURE__*/React.createElement(Popover, {
      content: /*#__PURE__*/React.createElement(C, {
        is: "Model.ItemEditForm",
        item: item,
        field: field,
        value: value,
        schema: schema,
        onClose: () => setEdit(false)
      }),
      trigger: "click",
      onVisibleChange: setEdit,
      visible: edit,
      placement: "right"
    }, /*#__PURE__*/React.createElement(RawWrapComponent, _extends({}, props, {
      style: {
        cursor: 'pointer'
      }
    }), children, " ", /*#__PURE__*/React.createElement(EditOutlined, null)));
  };

  if (item == undefined || item == null) {
    return /*#__PURE__*/React.createElement(WrapComponent, null, /*#__PURE__*/React.createElement("span", {
      className: "text-muted"
    }, _t('Null')));
  }

  if (componentClass) {
    var ItemComponent = componentClass;
    return /*#__PURE__*/React.createElement(ItemComponent, _extends({
      item: item,
      value: value,
      field: field,
      schema: schema,
      wrap: WrapComponent
    }, itemProps));
  } else {
    return /*#__PURE__*/React.createElement(WrapComponent, null, value == undefined || value == null ? /*#__PURE__*/React.createElement("span", {
      className: "text-muted"
    }, _t('Null')) : value);
  }
};

var Header = props => {
  var {
    showText,
    field
  } = props;
  var {
    title
  } = use('model.list.header', {
    field
  });
  var {
    order,
    canOrder,
    changeOrder
  } = use('model.list.order', {
    field
  });

  var renderOrder = () => {
    var orderItems = [];

    if (canOrder) {
      orderItems = [/*#__PURE__*/React.createElement(Menu.Item, {
        onClick: e => {
          changeOrder('ASC');
        },
        key: "ASC"
      }, /*#__PURE__*/React.createElement(CaretUpOutlined, null), " ", _t('Sort ASC')), /*#__PURE__*/React.createElement(Menu.Item, {
        onClick: e => {
          changeOrder('DESC');
        },
        key: "DESC"
      }, /*#__PURE__*/React.createElement(CaretDownOutlined, null), " ", _t('Sort DESC'))];

      if (order != '') {
        orderItems.push( /*#__PURE__*/React.createElement(Menu.Item, {
          onClick: e => {
            changeOrder('');
          }
        }, /*#__PURE__*/React.createElement(CloseOutlined, null), " ", _t('Clear order')));
      }
    }

    return orderItems;
  };

  var icon = {
    'ASC': /*#__PURE__*/React.createElement(CaretUpOutlined, null),
    'DESC': /*#__PURE__*/React.createElement(CaretDownOutlined, null)
  }[order] || '';
  var items = [...renderOrder(), ...(Block('model.list.header.menu') || [])];
  return items.filter(item => !_.isNil(item)).length > 0 ? /*#__PURE__*/React.createElement(Dropdown, {
    overlay: /*#__PURE__*/React.createElement(Menu, {
      selectedKeys: [order]
    }, React.Children.toArray(items)),
    trigger: ['click']
  }, /*#__PURE__*/React.createElement("a", {
    style: {
      cursor: 'pointer'
    }
  }, title, " ", icon)) : showText === false ? null : /*#__PURE__*/React.createElement("span", null, title, " ", icon);
};

var useActions = props => {
  var {
    renderActions
  } = use('model.actions');
  return /*#__PURE__*/React.createElement(Button.Group, {
    size: "small",
    className: "model-list-action"
  }, renderActions(props));
};

var useList = render => props => {
  var state = _objectSpread(_objectSpread(_objectSpread({}, props), use('model.list')), use('model'));

  var {
    loading,
    items,
    model
  } = state;
  var list = render(state);

  if (loading) {
    return /*#__PURE__*/React.createElement(Loading, null, items.length > 0 ? list : null);
  } else {
    if (items.length > 0) {
      return list;
    } else {
      var EmptyComponent = model.components && model.components.DataEmpty;

      if (EmptyComponent) {
        return /*#__PURE__*/React.createElement(EmptyComponent, null);
      } else {
        return /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(Empty, {
          style: {
            marginBottom: '.5rem'
          },
          description: _t('No Data')
        }));
      }
    }
  }
};

var DataTableActionRender = props => {
  return /*#__PURE__*/React.createElement("div", {
    style: {
      width: '100%',
      textAlign: 'center'
    }
  }, useActions(_objectSpread(_objectSpread({}, props), use('model.list.row', {
    id: props.id
  }))));
};

var DataTable = useList((_ref2) => {
  var {
    model,
    items,
    fields,
    size,
    onRow
  } = _ref2;
  var {
    selected,
    onSelect,
    onSelectAll
  } = use('model.select');
  var {
    actions
  } = use('model.actions');
  var {
    actions: batchActions
  } = use('model.batchActions');
  var lockedFields = model.lockedFields || [];
  var columns = [];
  fields.forEach(fieldName => {
    var field = getFieldProp(model, fieldName);
    if (!field) return;

    var column = _objectSpread({
      field,
      width: field.width || undefined,
      fixed: lockedFields.indexOf(fieldName) >= 0,
      title: /*#__PURE__*/React.createElement(Header, {
        key: "model-list-header-".concat(fieldName),
        field: fieldName
      }),
      key: fieldName,
      dataIndex: fieldName,
      render: (value, item) => {
        return /*#__PURE__*/React.createElement(C, {
          is: "Model.DataItem",
          item: item,
          field: fieldName,
          inList: true
        });
      }
    }, field.column);

    if (field.level2) {
      if (columns.length > 0 && columns[columns.length - 1].children !== undefined && columns[columns.length - 1].title == field.level2) {
        columns[columns.length - 1].children.push(column);
      } else {
        columns.push({
          title: field.level2,
          children: [column]
        });
      }
    } else {
      columns.push(column);
    }
  });
  if (actions && actions.length > 0) columns.push({
    title: '',
    key: '__action__',
    fixed: 'right',
    render: (val, item) => /*#__PURE__*/React.createElement(DataTableActionRender, {
      key: item.id,
      fields: fields,
      id: item.id
    })
  });
  var rowSelection = batchActions && batchActions.length > 0 ? {
    selectedRowKeys: selected.map(r => r.id),
    onSelect,
    onSelectAll
  } : undefined;
  var tableProps = model.dataTableProps ? typeof model.dataTableProps == 'function' ? model.dataTableProps(columns, items) : model.dataTableProps : {};
  return /*#__PURE__*/React.createElement(Table, _extends({
    columns: columns,
    dataSource: items,
    bordered: true,
    size: size,
    rowSelection: rowSelection,
    pagination: false,
    onRow: onRow,
    rowKey: "id" //scroll={{ x: 700 }}

  }, tableProps));
});

var DataListRender = props => {
  var {
    id,
    fields
  } = props;
  var {
    item,
    selected
  } = use('model.list.row', {
    id
  });
  var Item = C('Model.DataItem');
  return /*#__PURE__*/React.createElement(List.Item, {
    actions: [useActions(props)]
  }, /*#__PURE__*/React.createElement(List.Item.Meta, {
    title: /*#__PURE__*/React.createElement(Item, {
      item: item,
      field: fields[0],
      value: item[fields[0]],
      selected: selected
    }),
    description: /*#__PURE__*/React.createElement(Item, {
      item: item,
      field: fields[1],
      value: item[fields[1]],
      selected: selected
    })
  }), React.Children.toArray(fields.slice(2).map(field => {
    return /*#__PURE__*/React.createElement(Item, {
      item: item,
      field: field,
      value: item[field],
      selected: selected,
      inList: true,
      wrap: (_ref3) => {
        var {
          children
        } = _ref3,
            props = _objectWithoutProperties(_ref3, ["children"]);

        return /*#__PURE__*/React.createElement("div", _extends({
          key: "item-".concat(item.id, "-").concat(field)
        }, props), children);
      }
    });
  })));
};

var DataList = useList((_ref4) => {
  var {
    model,
    items,
    fields,
    size
  } = _ref4;
  var RenderItem = model.components && model.components.DataListRender || C('Model.DataListRender') || DataListRender;
  return /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(List, _extends({
    itemLayout: "vertical",
    dataSource: items,
    size: size,
    renderItem: item => /*#__PURE__*/React.createElement(RenderItem, {
      key: item.id,
      fields: fields,
      id: item.id
    })
  }, model.dataListProps)));
});
var DataCard = DataTable;

var ActionEdit = props => {
  var {
    canEdit
  } = use('model.permission');
  var {
    onEdit
  } = use('model.event');

  if (canEdit) {
    return /*#__PURE__*/React.createElement(Tooltip, {
      placement: "top",
      title: _t('Edit')
    }, /*#__PURE__*/React.createElement(Button, {
      key: "action-edit",
      size: "small",
      className: "model-list-action",
      onClick: () => onEdit(props.id)
    }, /*#__PURE__*/React.createElement(EditOutlined, null)));
  }

  return null;
};

var ActionDelete = props => {
  var {
    canDelete
  } = use('model.permission');
  var {
    deleteItem
  } = use('model.delete');

  if (canDelete) {
    return /*#__PURE__*/React.createElement(Popconfirm, {
      key: "action-delete",
      title: _t('Comfirm Delete') + '?',
      onConfirm: () => deleteItem(),
      okText: _t('Delete'),
      cancelText: _t('Cancel')
    }, /*#__PURE__*/React.createElement(Tooltip, {
      placement: "top",
      title: _t('Delete')
    }, /*#__PURE__*/React.createElement(Button, {
      key: "action-delete",
      size: "small",
      className: "model-list-action",
      type: "danger"
    }, /*#__PURE__*/React.createElement(DeleteOutlined, null))));
  }

  return null;
};

export default DataTable;
export { Item, Header, DataTable, DataList, DataCard, ActionEdit, ActionDelete, ItemEditForm };