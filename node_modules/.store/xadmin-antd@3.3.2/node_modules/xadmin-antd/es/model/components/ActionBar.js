function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import _ from 'lodash';
import { DownOutlined } from '@ant-design/icons';
import { Dropdown, Button, Menu } from 'antd';
import { app, use } from 'xadmin';
import { _t } from 'xadmin-i18n';
export default (props => {
  var {
    model
  } = use('model');
  var {
    count
  } = use('model.select');
  var {
    renderActions
  } = use('model.batchActions');
  var actions = renderActions(_objectSpread(_objectSpread({}, props), {}, {
    model
  }));
  return actions && actions.length > 0 ? /*#__PURE__*/React.createElement(Dropdown, {
    id: "model-list-actions",
    overlay: /*#__PURE__*/React.createElement(Menu, null, React.Children.toArray(actions))
  }, /*#__PURE__*/React.createElement(Button, null, count > 0 ? _t('{{count}} record selected', {
    count
  }) : _t('No data selected'), " ", /*#__PURE__*/React.createElement(DownOutlined, null))) : /*#__PURE__*/React.createElement("div", null);
});