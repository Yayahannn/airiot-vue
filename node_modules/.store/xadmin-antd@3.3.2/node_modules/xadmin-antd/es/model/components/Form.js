function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import _ from 'lodash';
import { Loading } from 'xadmin-ui';
import { SchemaForm } from 'xadmin-form';
import { use } from 'xadmin';

var ModelForm = props => {
  var {
    title,
    schema
  } = props,
      formProps = _objectWithoutProperties(props, ["title", "schema"]);

  var {
    model
  } = use('model');
  var {
    data,
    loading,
    saveItem
  } = use('model.item', props);
  return loading ? /*#__PURE__*/React.createElement(Loading, null) : /*#__PURE__*/React.createElement(SchemaForm, _extends({
    formKey: "model.".concat(model.key),
    schema: schema || model,
    initialValues: data,
    onSubmit: item => saveItem(item)
  }, formProps, model.formProps));
};

export default ModelForm;