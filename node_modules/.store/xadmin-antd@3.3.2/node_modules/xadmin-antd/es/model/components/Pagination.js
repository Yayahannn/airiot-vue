function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { Pagination, Button } from 'antd';
import app, { use } from 'xadmin';
import { _t } from 'xadmin-i18n';
export default (props => {
  var {
    emptyComponent,
    maxButtons = 6
  } = props,
      pagerProps = _objectWithoutProperties(props, ["emptyComponent", "maxButtons"]);

  var {
    items,
    activePage,
    changePage
  } = use('model.pagination');

  if (items > 1 || emptyComponent == undefined) {
    return /*#__PURE__*/React.createElement(Pagination, _extends({
      showQuickJumper: items > 10,
      showSizeChanger: false,
      current: activePage,
      size: props.size == 'sm' ? 'small' : '',
      className: props.className,
      pageSize: 1,
      total: items,
      onChange: changePage
    }, pagerProps));
  } else {
    return emptyComponent !== undefined ? emptyComponent : /*#__PURE__*/React.createElement(Button, null, _t('No paging'));
  }
});