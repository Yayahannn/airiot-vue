"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash"));

var _xadmin = _interopRequireDefault(require("xadmin"));

var _antd = require("antd");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var NumberFilter = props => {
  var {
    input: {
      name,
      value,
      onBlur,
      onChange
    },
    field
  } = props,
      inputProps = _objectWithoutProperties(props.input, ["name", "value", "onBlur", "onChange"]);

  var {
    _t
  } = _xadmin.default.context;
  var gte = !_lodash.default.isNil(value.gte) ? value.gte : '';
  var lte = !_lodash.default.isNil(value.lte) ? value.lte : '';

  var inputChange = (v, k) => {
    var vs = _lodash.default.pickBy(_objectSpread(_objectSpread({}, value), {}, {
      [k]: v
    }), _lodash.default.isNumber);

    onChange(_lodash.default.isEmpty(vs) ? null : vs);
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      display: 'inline-flex'
    }
  }, /*#__PURE__*/_react.default.createElement(_antd.InputNumber, _extends({}, inputProps, field.attrs, {
    style: _objectSpread({
      width: 'auto'
    }, field.style),
    value: gte,
    placeholder: field.minimum ? "Minimum(".concat(field.minimum, ")") : _t('No limit'),
    onChange: v => inputChange(v, 'gte')
  })), /*#__PURE__*/_react.default.createElement("span", {
    style: {
      textAlign: 'center',
      width: '2rem',
      lineHeight: '30px'
    }
  }, "~"), /*#__PURE__*/_react.default.createElement(_antd.InputNumber, _extends({}, inputProps, field.attrs, {
    style: _objectSpread({
      width: 'auto'
    }, field.style),
    value: lte,
    placeholder: field.maximum ? "Maximum(".concat(field.maximum, ")") : _t('No limit'),
    onChange: v => inputChange(v, 'lte')
  })));
};

var _default = NumberFilter;
exports.default = _default;