"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _xadmin = require("xadmin");

var _lodash = _interopRequireDefault(require("lodash"));

var _xadminI18n = require("xadmin-i18n");

var _icons = require("@ant-design/icons");

var _antd = require("antd");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Search = _antd.Input.Search;

var useTextFilter = (_ref) => {
  var {
    input
  } = _ref;
  var {
    form
  } = (0, _xadmin.use)('form');
  var value = input.value;
  var like = null;

  if (value == null || value == undefined || value == '') {
    value = '';
    like = (0, _xadmin.config)('filter') && (0, _xadmin.config)('filter').textDefaultSearch == true;
  } else if (value && value.like !== undefined) {
    value = value.like;
    like = true;
  } else {
    like = false;
  }

  var onChange = (_ref2) => {
    var {
      value,
      like
    } = _ref2;

    if (like) {
      input.onChange({
        like: value
      });
    } else {
      input.onChange(value);
    }
  };

  var onValueChange = value => {
    if (like) {
      input.onChange({
        like: value
      });
    } else {
      input.onChange(value);
    }
  };

  var onLikeChange = like => {
    if (like) {
      input.onChange({
        like: value
      });
    } else {
      input.onChange(value);
    }
  };

  var onKeyPress = e => {
    if (e.key === 'Enter') {
      form.submit();
    }
  };

  var clear = () => onValueChange(null);

  var changeModeBtn = /*#__PURE__*/_react.default.createElement(_antd.Tooltip, {
    title: (0, _xadminI18n._t)('Exact Search')
  }, /*#__PURE__*/_react.default.createElement(_antd.Typography.Text, {
    type: !like ? 'success' : 'secondary',
    onClick: () => onLikeChange(!like),
    style: {
      cursor: 'pointer'
    }
  }, value == null || value == undefined || value == '' ? null : /*#__PURE__*/_react.default.createElement(_icons.AimOutlined, null)));

  return {
    like,
    value,
    onChange,
    onValueChange,
    onLikeChange,
    onKeyPress,
    clear,
    changeModeBtn
  };
};

var TextFilter = props => {
  var {
    input: {
      name,
      onBlur,
      onChange
    },
    label,
    field
  } = props,
      inputProps = _objectWithoutProperties(props.input, ["name", "onBlur", "onChange"]);

  var {
    value,
    changeModeBtn,
    onValueChange,
    onKeyPress
  } = useTextFilter(props);
  return /*#__PURE__*/_react.default.createElement(_antd.Input, _extends({}, inputProps, field.attrs, {
    value: value,
    suffix: changeModeBtn,
    onChange: e => onValueChange(e.target.value),
    onKeyPress: onKeyPress,
    placeholder: (0, _xadminI18n._t)('Search {{label}}', {
      label
    })
  }));
};

var SearchTextFilter = props => {
  var {
    input: {
      name,
      onBlur,
      onChange
    },
    onSubmit,
    label,
    field
  } = props,
      inputProps = _objectWithoutProperties(props.input, ["name", "onBlur", "onChange"]);

  var {
    value,
    changeModeBtn,
    onValueChange
  } = useTextFilter(props);
  return /*#__PURE__*/_react.default.createElement(Search, _extends({}, inputProps, field.attrs, {
    value: value,
    suffix: changeModeBtn,
    onChange: e => onValueChange(e.target.value),
    onSearch: value => {
      onValueChange(value);
      onSubmit && onSubmit();
    },
    placeholder: (0, _xadminI18n._t)('Search {{label}}', {
      label
    })
  }));
};

var SubmitOnChangeWrap = (_ref3) => {
  var {
    input
  } = _ref3,
      props = _objectWithoutProperties(_ref3, ["input"]);

  var [state, setState] = _react.default.useState({
    value: null,
    typing: false
  });

  _react.default.useEffect(() => {
    if (!state.typing) {
      setState({
        value: input.value,
        typing: false
      });
    }
  }, [input.value]);

  var onSubmit = () => {
    input.onChange(state.value);
    setState(_objectSpread(_objectSpread({}, state), {}, {
      typing: false
    }));
  };

  var onChange = value => setState({
    value,
    typing: true
  });

  return /*#__PURE__*/_react.default.createElement(SearchTextFilter, _extends({
    input: _objectSpread(_objectSpread({}, input), {}, {
      onChange: onChange,
      value: state.value
    })
  }, props, {
    onSubmit: onSubmit
  }));
};

var _default = (_ref4) => {
  var {
    option
  } = _ref4,
      props = _objectWithoutProperties(_ref4, ["option"]);

  var submitOnChange = option && option.options && option.options.submitOnChange;
  return submitOnChange ? /*#__PURE__*/_react.default.createElement(SubmitOnChangeWrap, _extends({}, props, {
    option: option
  })) : /*#__PURE__*/_react.default.createElement(TextFilter, _extends({}, props, {
    option: option
  }));
};

exports.default = _default;