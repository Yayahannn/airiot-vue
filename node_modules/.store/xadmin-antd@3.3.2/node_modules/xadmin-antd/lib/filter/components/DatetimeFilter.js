"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _moment = _interopRequireDefault(require("moment"));

var _antd = require("antd");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class DateRange extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      endOpen: false
    });

    _defineProperty(this, "disabledStartDate", startValue => {
      var {
        field
      } = this.props;
      var endValue = this.state.endValue;

      if (!startValue || !endValue) {
        return false;
      }

      if (field.attrs && field.attrs.maxDate && field.attrs.maxDate < startValue) {
        return true;
      }

      return startValue.valueOf() > endValue.valueOf();
    });

    _defineProperty(this, "disabledEndDate", endValue => {
      var {
        field
      } = this.props;
      var startValue = this.state.startValue;

      if (!endValue || !startValue) {
        return false;
      }

      if (field.attrs && field.attrs.maxDate && field.attrs.maxDate < endValue) {
        return true;
      }

      return endValue.valueOf() <= startValue.valueOf();
    });

    _defineProperty(this, "onChange", (fieldKey, newValue) => {
      var {
        onChange,
        value
      } = this.props.input;
      var format = this.props.field.datetimeFormat || 'YYYY-MM-DD HH:mm:ss';
      onChange(_objectSpread(_objectSpread({}, value), {}, {
        [fieldKey]: newValue.format(format),
        rule: 'range'
      }));
    });

    _defineProperty(this, "onStartChange", value => {
      this.onChange('gte', value);
    });

    _defineProperty(this, "onEndChange", value => {
      this.onChange('lte', value);
    });

    _defineProperty(this, "handleStartOpenChange", open => {
      if (!open) {
        this.setState({
          endOpen: true
        });
      }
    });

    _defineProperty(this, "handleEndOpenChange", open => {
      this.setState({
        endOpen: open
      });
    });
  }

  render() {
    var {
      input,
      field
    } = this.props;
    var format = field.datetimeFormat || 'YYYY-MM-DD HH:mm:ss';
    var inputValue = input.value;
    var {
      endOpen
    } = this.state;
    var startValue = inputValue && inputValue.gte && (0, _moment.default)(inputValue.gte);
    var endValue = inputValue && inputValue.lte && (0, _moment.default)(inputValue.lte);
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_antd.DatePicker, {
      disabledDate: this.disabledStartDate,
      showTime: true,
      format: format,
      value: startValue,
      placeholder: "\u8D77\u59CB",
      onChange: this.onStartChange,
      onOpenChange: this.handleStartOpenChange
    }), " \u5230", ' ', /*#__PURE__*/_react.default.createElement(_antd.DatePicker, {
      disabledDate: this.disabledEndDate,
      showTime: true,
      format: format,
      value: endValue,
      placeholder: "\u7ED3\u675F",
      onChange: this.onEndChange,
      open: endOpen,
      onOpenChange: this.handleEndOpenChange
    }));
  }

}

var _default = DateRange;
exports.default = _default;