"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleGroup = exports.ColGroup = exports.InlineGroup = exports.FieldTableGroup = exports.FieldGroup = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash"));

var _antd = require("antd");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var FieldGroup = (_ref) => {
  var {
    label,
    meta,
    input,
    field,
    tailLayout,
    children
  } = _ref;
  var attrs = field.attrs || {};
  var error = meta.touched && (meta.error || meta.submitError);
  var extra = field.description || field.help;
  var size = field.option && field.option.groupSize || attrs.groupSize || {
    labelCol: {
      xs: {
        span: 24
      },
      sm: {
        span: 5
      }
    },
    wrapperCol: {
      xs: {
        span: 24
      },
      sm: {
        span: 19,
        offset: tailLayout ? 5 : 0
      }
    }
  };

  var groupProps = _objectSpread(_objectSpread({
    extra
  }, size), {}, {
    required: field.required
  });

  if (error) {
    groupProps['validateStatus'] = 'error';

    if (_lodash.default.isString(error)) {
      groupProps['help'] = error;
    }
  }

  var controlComponent = children ? children : /*#__PURE__*/_react.default.createElement(_antd.Input, _extends({}, input, attrs));
  return /*#__PURE__*/_react.default.createElement(_antd.Form.Item, _extends({
    label: label
  }, groupProps), controlComponent, field.formText ? /*#__PURE__*/_react.default.createElement("span", {
    className: "ant-form-text"
  }, " ", field.formText) : null);
};

exports.FieldGroup = FieldGroup;

var FieldTableGroup = (_ref2) => {
  var {
    label,
    meta,
    input,
    field,
    nav,
    children
  } = _ref2;
  var attrs = field.attrs || {};
  var error = meta.touched && (meta.error || meta.submitError);
  var extra = field.description || field.help;
  var size = field.option && field.option.groupSize || attrs.groupSize || {
    labelCol: {
      xs: {
        span: 24
      },
      sm: {
        span: 5
      }
    },
    wrapperCol: {
      xs: {
        span: 24
      },
      sm: {
        span: 18
      }
    }
  };

  var groupProps = _objectSpread(_objectSpread({
    extra
  }, size), {}, {
    required: field.required
  });

  if (error) {
    groupProps['validateStatus'] = 'error';
    groupProps['help'] = error;
  }

  var controlComponent = children ? children : /*#__PURE__*/_react.default.createElement(_antd.Input, _extends({}, input, attrs));
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_antd.Form.Item, _extends({
    label: label
  }, groupProps), nav, field.formText ? /*#__PURE__*/_react.default.createElement("span", {
    className: "ant-form-text"
  }, " ", field.formText) : null), controlComponent);
};

exports.FieldTableGroup = FieldTableGroup;

var InlineGroup = (_ref3) => {
  var {
    label,
    meta,
    input,
    field,
    children
  } = _ref3;
  var attrs = field.attrs || {};
  var error = meta.touched && (meta.error || meta.submitError);
  var extra = field.description || field.help;
  var groupProps = {
    extra,
    required: field.required
  };

  if (error) {
    groupProps['validateStatus'] = 'error';
    groupProps['help'] = error;
  }

  var controlComponent = children ? children : /*#__PURE__*/_react.default.createElement(_antd.Input, _extends({}, input, attrs));
  return /*#__PURE__*/_react.default.createElement(_antd.Form.Item, groupProps, /*#__PURE__*/_react.default.cloneElement(controlComponent, {
    inline: true
  }), field.formText ? /*#__PURE__*/_react.default.createElement("span", {
    className: "ant-form-text"
  }, " ", field.formText) : null);
};

exports.InlineGroup = InlineGroup;

var SimpleGroup = (_ref4) => {
  var {
    label,
    meta,
    input,
    field,
    children
  } = _ref4;
  var attrs = field.attrs || {};
  var error = meta.touched && (meta.error || meta.submitError);
  var extra = field.description || field.help;
  var groupProps = {
    extra,
    required: field.required
  };

  if (error) {
    groupProps['validateStatus'] = 'error';
    groupProps['help'] = error;
  }

  var controlComponent = children ? children : /*#__PURE__*/_react.default.createElement(_antd.Input, _extends({}, input, attrs));
  return /*#__PURE__*/_react.default.createElement(_antd.Form.Item, _extends({
    label: label
  }, groupProps), controlComponent, field.formText ? /*#__PURE__*/_react.default.createElement("span", {
    className: "ant-form-text"
  }, " ", field.formText) : null);
};

exports.SimpleGroup = SimpleGroup;

var ColGroup = (_ref5) => {
  var {
    label,
    meta,
    input,
    field,
    children
  } = _ref5;
  var attrs = field.attrs || {};
  var error = meta.touched && (meta.error || meta.submitError);
  var extra = field.description || field.help;
  var size = field.option && field.option.groupSize || attrs.groupSize || {
    labelCol: {
      xs: {
        span: 24
      },
      sm: {
        span: 8
      }
    },
    wrapperCol: {
      xs: {
        span: 24
      },
      sm: {
        span: 16
      }
    }
  };

  var groupProps = _objectSpread(_objectSpread({
    extra
  }, size), {}, {
    required: field.required
  });

  if (error) {
    groupProps['validateStatus'] = 'error';
    groupProps['help'] = error;
  }

  var controlComponent = children ? children : /*#__PURE__*/_react.default.createElement(_antd.Input, _extends({}, input, attrs));
  return /*#__PURE__*/_react.default.createElement(_antd.Col, {
    span: 8,
    xs: 24,
    sm: 12,
    md: 12,
    lg: 8,
    xl: 8,
    xxl: 6
  }, /*#__PURE__*/_react.default.createElement(_antd.Form.Item, _extends({
    label: label
  }, groupProps), controlComponent, field.formText ? /*#__PURE__*/_react.default.createElement("span", {
    className: "ant-form-text"
  }, field.formText) : null));
};

exports.ColGroup = ColGroup;