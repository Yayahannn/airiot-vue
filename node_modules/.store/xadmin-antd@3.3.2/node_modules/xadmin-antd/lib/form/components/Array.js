"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _xadminForm = require("xadmin-form");

var _icons = require("@ant-design/icons");

var _antd = require("antd");

var _xadmin = _interopRequireDefault(require("xadmin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultItemsRender = (_ref) => {
  var {
    fields,
    meta: {
      touched,
      error
    },
    field,
    fieldsBuilder
  } = _ref;
  var {
    items,
    label
  } = field;
  return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_antd.Button, {
    onClick: () => fields.push(null)
  }, /*#__PURE__*/_react.default.createElement(_icons.PlusOutlined, null)), fields.map((name, index) => {
    var removeBtn = /*#__PURE__*/_react.default.createElement(_antd.Button, {
      size: "small",
      onClick: e => {
        fields.remove(index);
        e.persist();
      },
      style: {
        float: 'right'
      }
    }, /*#__PURE__*/_react.default.createElement(_icons.DeleteOutlined, null));

    var fieldsComponent = fieldsBuilder(name, index, removeBtn);
    return fieldsComponent.length > 1 ? /*#__PURE__*/_react.default.createElement(_antd.Card, {
      key: "items".concat(index),
      size: "small",
      title: label + ' ' + (index + 1),
      extra: removeBtn,
      style: {
        width: '100%',
        marginTop: '0.5rem'
      }
    }, fieldsComponent) : fieldsComponent;
  }), touched && error ? error : null);
};

var _default = (_ref2) => {
  var {
    input,
    label,
    meta,
    field,
    option,
    group
  } = _ref2;
  var renderItems = field.itemsRender || defaultItemsRender;

  if (typeof renderItems === 'string') {
    renderItems = _xadmin.default.load_dict('array_render')[renderItems];
  }

  var {
    items
  } = field;

  var fieldsBuilder = (name, index, removeBtn, itemLable) => {
    var itemLabel = itemLable || /*#__PURE__*/_react.default.createElement("div", null, removeBtn ? removeBtn : '');

    var itemFields = items.fields ? items.fields.map(f => (0, _xadminForm.prefixFieldKey)(f, name + '.')) : [_objectSpread(_objectSpread({}, items), {}, {
      key: name,
      name: name,
      label: itemLabel
    })];
    return (0, _xadminForm.objectBuilder)(itemFields, items.render, option);
  };

  return /*#__PURE__*/_react.default.createElement(_xadminForm.FieldArray, {
    name: field.name,
    label: label,
    meta: meta,
    input: input,
    component: renderItems,
    field: field,
    group: group,
    fieldsBuilder: fieldsBuilder
  });
};

exports.default = _default;