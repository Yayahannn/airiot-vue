"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash"));

var _xadmin = _interopRequireWildcard(require("xadmin"));

var _xadminI18n = require("xadmin-i18n");

var _antd = require("antd");

var _xadminForm = require("xadmin-form");

var _xadminModel = require("xadmin-model");

var _xadminUi = require("xadmin-ui");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ChildrenModel = props => {
  var [show, setShow] = _react.default.useState(false);

  var {
    parent,
    model,
    refFilter,
    refData,
    refField,
    modelProps,
    children,
    header,
    value,
    onClose,
    refreshTimeout
  } = props,
      extProps = _objectWithoutProperties(props, ["parent", "model", "refFilter", "refData", "refField", "modelProps", "children", "header", "value", "onClose", "refreshTimeout"]);

  var handleCancel = () => {
    setShow(false);
    onClose && onClose();
  };

  var cmodel = _lodash.default.isString(model) ? _xadmin.default.get('models')[model] : model;

  var schema = _objectSpread(_objectSpread({}, cmodel), {}, {
    parent,
    itemActions: [...(cmodel.itemActions || []), item => /*#__PURE__*/_react.default.createElement(EditChildrenModelBtn, {
      id: item.id,
      refData: refData,
      refreshTimeout: refreshTimeout
    }, (0, _xadminI18n._t)('Edit'))],
    permission: _objectSpread(_objectSpread({}, cmodel.permission), {}, {
      edit: false,
      childEdit: cmodel.permission && cmodel.permission.edit
    })
  }, modelProps);

  var initialValues = {
    wheres: {
      filters: refFilter || {
        [refField]: parent.id
      }
    }
  };
  var action = children && !_lodash.default.isString(children) && /*#__PURE__*/_react.default.isValidElement(children) ? /*#__PURE__*/_react.default.cloneElement(children, {
    onClick: () => setShow(true)
  }) : /*#__PURE__*/_react.default.createElement(_antd.Button, _extends({
    size: "small",
    key: "child-model-action",
    className: "model-list-action"
  }, extProps, {
    onClick: () => setShow(true)
  }), children || cmodel.title || cmodel.name);
  var ItemsComponent = cmodel.components && cmodel.components.DataList || (0, _xadminUi.C)('Model.DataTable');
  return [action, show ? /*#__PURE__*/_react.default.createElement(_xadminModel.Model, {
    schema: schema,
    modelKey: "".concat(_lodash.default.isString(model) ? model : model.name, "_").concat(parent.id),
    initialValues: initialValues
  }, /*#__PURE__*/_react.default.createElement(_antd.Modal, {
    key: 1,
    visible: show,
    title: header || cmodel.title || cmodel.name,
    width: "80%",
    onCancel: handleCancel,
    onOk: handleCancel
  }, /*#__PURE__*/_react.default.createElement("div", {
    key: "model-list-subnav",
    style: {
      display: 'flex',
      justifyContent: 'space-between',
      marginBottom: '.5rem'
    }
  }, /*#__PURE__*/_react.default.createElement(_xadminUi.C, {
    is: "Model.Pagination"
  }), /*#__PURE__*/_react.default.createElement(_xadminUi.C, {
    is: "Model.ListSubMenu"
  }, /*#__PURE__*/_react.default.createElement(AddChildrenModelBtn, props))), /*#__PURE__*/_react.default.createElement(ItemsComponent, {
    key: "model-list-grid"
  }), /*#__PURE__*/_react.default.createElement("div", {
    key: "model-list-downnav",
    style: {
      display: 'flex',
      justifyContent: 'space-between',
      marginTop: '.5rem'
    }
  }, /*#__PURE__*/_react.default.createElement(_xadminUi.C, {
    is: "Model.ActionBar"
  }), /*#__PURE__*/_react.default.createElement(_xadminUi.C, {
    is: "Model.Pagination"
  })))) : null];
};

var AddChildrenModelBtn = props => {
  var [show, setShow] = _react.default.useState(false);

  var {
    model
  } = (0, _xadmin.use)('model');
  var {
    getItems
  } = (0, _xadmin.use)('model.getItems');
  var {
    canAdd
  } = (0, _xadmin.use)('model.permission');
  var {
    refData,
    refreshTimeout
  } = props;

  var onSuccess = () => {
    if (refreshTimeout) {
      setTimeout(getItems, refreshTimeout);
    } else {
      getItems();
    }
  };

  return canAdd ? [/*#__PURE__*/_react.default.createElement(_antd.Button, {
    key: 0,
    style: {
      marginLeft: '.5rem'
    },
    onClick: () => setShow(true)
  }, (0, _xadminI18n._t)('Add {{object}}', {
    object: model.title
  })), /*#__PURE__*/_react.default.createElement(ChildrenFormModel, {
    key: 1,
    onSuccess: onSuccess,
    refData: refData,
    show: show,
    onClose: () => setShow(false)
  })] : null;
};

var EditChildrenModelBtn = props => {
  var [show, setShow] = _react.default.useState(false);

  var {
    model
  } = (0, _xadmin.use)('model');
  var {
    getItems
  } = (0, _xadmin.use)('model.getItems');
  var {
    id,
    refData,
    refreshTimeout
  } = props;
  var canChildEdit = !!model.permission && !!model.permission.childEdit;

  var onSuccess = () => {
    if (refreshTimeout) {
      setTimeout(getItems, refreshTimeout);
    } else {
      getItems();
    }
  };

  return canChildEdit && [/*#__PURE__*/_react.default.createElement(_antd.Button, {
    key: 0,
    size: "sm",
    className: "model-list-action",
    onClick: () => setShow(true)
  }, (0, _xadminI18n._t)('Edit')), show ? /*#__PURE__*/_react.default.createElement(ChildrenFormModel, {
    key: 1,
    onSuccess: onSuccess,
    id: id,
    refData: refData,
    show: show,
    onClose: () => {
      setShow(false);
    }
  }) : null];
};

var ChildrenFormModel = props => {
  var {
    show,
    title,
    onClose,
    modalProps,
    onSuccess,
    refData
  } = props;
  var {
    model
  } = (0, _xadmin.use)('model');
  var {
    data,
    loading,
    saveItem
  } = (0, _xadmin.use)('model.item', props);

  var onSubmitSuccess = item => {
    onClose();
    onSuccess(item);
  };

  var onSaveItem = values => {
    saveItem(_objectSpread(_objectSpread({}, values), refData));
  };

  var FormLayout = props => {
    var {
      children,
      invalid,
      handleSubmit,
      submitting
    } = props;
    return /*#__PURE__*/_react.default.createElement(_antd.Modal, _extends({}, modalProps, {
      visible: show,
      width: "70%",
      title: title,
      className: "xadmin-modal-form",
      onCancel: onClose,
      onOk: handleSubmit,
      okButtonDisabled: invalid || submitting,
      okText: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_xadminUi.Icon, {
        name: "ban"
      }), " ", (0, _xadminI18n._t)('Save')),
      okButtonProps: {
        loading: submitting
      }
    }), /*#__PURE__*/_react.default.createElement(_antd.Form, null, children));
  };

  return show && !loading ? /*#__PURE__*/_react.default.createElement(_xadminForm.SchemaForm, {
    formKey: "model.modalform.".concat(model.key),
    schema: model,
    initialValues: _objectSpread(_objectSpread({}, data), refData),
    onSubmit: onSaveItem,
    onClose: onClose,
    component: FormLayout,
    onSubmitSuccess: onSubmitSuccess
  }) : null;
};

var _default = ChildrenModel;
exports.default = _default;