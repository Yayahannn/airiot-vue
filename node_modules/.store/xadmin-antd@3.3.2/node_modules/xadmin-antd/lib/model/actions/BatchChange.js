"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash"));

var _antd = require("antd");

var _xadminForm = require("xadmin-form");

var _xadmin = require("xadmin");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BatchChangeBtn = props => {
  var {
    _t
  } = _xadmin.app.context;

  var [show, setShow] = _react.default.useState(false);

  var {
    canEdit,
    fields,
    loading,
    onBatchChange
  } = (0, _xadmin.use)('actons.batch_change');
  var {
    selected
  } = (0, _xadmin.use)('model.select');
  var {
    model
  } = (0, _xadmin.use)('model');

  var onClose = () => setShow(false);

  var renderModel = () => {
    var fs = fields.map(f => f.split('.')[0]);
    return /*#__PURE__*/_react.default.createElement(_xadminForm.SchemaForm, {
      key: "actions_batch_change_form",
      formKey: "model_batch.".concat(model.key),
      schema: _lodash.default.omit(_objectSpread(_objectSpread({}, model), {}, {
        properties: _lodash.default.pick(model.properties, fs),
        form: model.form !== undefined ? fs.map(name => _lodash.default.find(model.form, f => f && f.key == name) || name) : ['*']
      }), 'required'),
      onSubmit: onBatchChange,
      onSubmitSuccess: onClose,
      onClose: onClose
    }, (_ref) => {
      var {
        children,
        invalid,
        handleSubmit,
        submitting,
        onClose
      } = _ref;
      return /*#__PURE__*/_react.default.createElement(_antd.Modal, {
        key: "actions_batch_change_modal",
        visible: show,
        onClose: onClose,
        title: _t('Please input the value to batch change items'),
        okText: _t('Change'),
        onOk: handleSubmit,
        okButtonDisabled: invalid || submitting,
        cancelText: _t('Cancel'),
        onCancel: onClose,
        okButtonProps: {
          loading
        }
      }, /*#__PURE__*/_react.default.createElement(_antd.Form, {
        onSubmit: handleSubmit
      }, children));
    });
  };

  return canEdit && fields.length > 0 ? [/*#__PURE__*/_react.default.createElement(_antd.Menu.Item, _extends({}, props, {
    key: "actions_batch_change",
    onClick: e => {
      props.onClick && props.onClick(e);
      setShow(true);
    },
    disabled: selected.length == 0
  }), _t('Batch Change Items')), selected.length > 0 ? renderModel() : null] : null;
};

var _default = BatchChangeBtn;
exports.default = _default;